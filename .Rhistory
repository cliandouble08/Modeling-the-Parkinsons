numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
# Standardize all columns except PATNO
standardize_cols <- names(updated_numeric_df_selected) != "PATNO"
updated_numeric_df_selected[, standardize_cols] <- scale(updated_numeric_df_selected[, standardize_cols])
length(numeric_vars_selected)
# Numeric dataframe for correlation: updated_numeric_df_selected
# updated_numeric_df_selected was already filtered with ANOVA test
cor_df <- updated_numeric_df_selected %>%
lapply(., as.numeric) %>%
as.data.frame() %>%
mutate(X0_2__di_22_6_BMP = NULL,
total_di_22_6_BMP = NULL) %>%
na.omit()
# Compute correlation coefficient
pearson_cor <- cor(cor_df, method = "pearson")
# Plot in correlation matrix
png("figures/pre-analysis/pearson_correlation.png",
width = 15000, height = 15000, res = 1000)
pearson_cor_plot <- corrplot.mixed(pearson_cor,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "pie", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
dev.off()
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
dplyr::select(-MSEADLG, -scopa_gi, -pigd)
names(cor_df_updated)
length(categorical_vars_selected)
categorical_vars_selected
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
dplyr::select(-MSEADLG, -scopa_gi, -pigd)
selected_vars <- unique(names(cor_df_updated))
selected_vars
selected_vars <- unique(names(cor_df_updated))
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, selected_vars, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
View(final_numeric_df_selected)
# Merge all dataframes for modeling
model_df <- merge(final_numeric_df_selected, # All categorical predictors
categorical_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
## Complete-case model -----
model_df_updated <- model_df %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
names(model_df_updated)
nrow(model_df_updated)
nrow(raw_df)
nrow(df_selected)
View(df_selected)
model_df_na_free <- na.omit(model_df_updated)
nrow(model_df_na_free)
nrow(subset(model_df_na_free, CONCOHORT == 1))
nrow(subset(model_df_na_free, CONCOHORT == 2))
nrow(subset(model_df_na_free, CONCOHORT == 3))
nrow(subset(model_df_updated, CONCOHORT == 1))
nrow(subset(model_df_updated, CONCOHORT == 2))
nrow(subset(model_df_updated, CONCOHORT == 3))
# Complete-case ordinal model without linear regression
ordinal_model_plain <- ulam(
alist(
CONCOHORT ~ dordlogit(0, cutpoints),
cutpoints ~ dnorm(0, 1.5)
), data = model_df_na_free,
chains = 4, warmup = 2000, iter = 4000,
cores = 24, log_lik = TRUE, messages = FALSE
)
install.packages("mingw32-make")
install_cmdstan("mingw32-make")
install.packages("g++")
install.packages("Rtools")
rtool
install.packages("mingw32-make", type = "source")
mingw32-make --version
clinfo
clinfo
# Complete-case ordinal model without linear regression
ordinal_model_plain <- ulam(
alist(
CONCOHORT ~ dordlogit(0, cutpoints),
cutpoints ~ dnorm(0, 10)
), data = model_df_na_free,
chains = 4, warmup = 5000, iter = 20000,
cores = 24, log_lik = TRUE, messages = FALSE
)
model_df_na_free$PDTRTMNT
unique(model_df_na_free$PDTRTMNT)
View(model_df_na_free)
# Complete-case ordinal model with linear regression
test_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <- b_scopa * scopa + b_PDTRTMNT[PDTRTMNT],
b_scopa ~ dnorm(0, 1),
b_PDTRTMNT[PDTRTMNT] ~ dnorm(0, 1),
cutpoints ~ dnorm(0, 1)
), data = model_df_na_free
)
precis(test_model, depth = 2)
inv_logit(coef(test_model))
View(model_df_updated)
names(model_df_updated)
nrow(is.na(model_df_updated$ASHKJEW))
length(is.na(model_df_updated$ASHKJEW))
## Complete-case model -----
model_df_updated <- model_df %>%
dplyr::select(-PDTRTMNT, -ASHKJEW) %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
## Complete-case model -----
model_df_updated <- model_df %>%
select(-PDTRTMNT, -ASHKJEW) %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
dplyr::select(-c(PDTRTMNT, ASHKJEW) %>%
## Complete-case model -----
model_df_updated <- model_df %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW)) %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
names(model_df)
model_df_updated <- model_df %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW))
## Complete-case model -----
model_df_updated <- model_df %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW))
names(model_df_updated)
is.na(model_df_updated$hy)
sum(is.na(model_df_updated$hy]))
sum(is.na(model_df_updated$hy))
sum(is.na(model_df_updated$NHY))
names(model_df_updated)
## Complete-case model -----
model_df_updated <- model_df %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW, hy))
names(model_df_updated)
sum(is.na(model_df_updated))
sum(is.na(model_df_updated[,]))
lapply(model_df_updated, sum(is.na))
lapply(model_df_updated, is.na)
test <- lapply(model_df_updated, is.na)
sum(test)
lapply(test, sum)
## Complete-case model -----
model_df_updated <- model_df %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW, hy, upsit))
names(model_df_updated)
model_df_updated <- model_df_updated %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
## Complete-case model -----
model_df_updated <- model_df_updated %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW, hy, upsit)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
## Complete-case model -----
model_df_updated <- model_df %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW, hy, upsit)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
model_df_na_free <- na.omit(model_df_updated)
nrow(model_df_na_free)
categorical_vars_selected
selected_vars
PDTRTMNT, ASHKJEW, hy, upsit
# Complete-case ordinal model with linear regression
test_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <- b_scopa * scopa + b_PDTRTMNT[PDTRTMNT],
b_scopa ~ dnorm(0, 1),
b_PDTRTMNT[PDTRTMNT] ~ dnorm(0, 1),
cutpoints ~ dnorm(0, 1)
), data = model_df_na_free
)
## Complete-case model -----
model_df_updated <- model_df %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW, hy, upsit)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
source("package_prep.R")
## Complete-case model -----
model_df_updated <- model_df %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW, hy, upsit)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
model_df_na_free <- na.omit(model_df_updated)
names(model_df_na_free)
# Complete-case ordinal model without linear regression
ordinal_model_plain <- ulam(
alist(
CONCOHORT ~ dordlogit(0, cutpoints),
cutpoints ~ dnorm(0, 10)
), data = model_df_na_free,
chains = 24, warmup = 1.5e4, iter = 1e6,
cores = 24, log_lik = TRUE, messages = FALSE
)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 10),
c(b_td_pigd[td_pigd], b_NHY[NHY], b_NP1FATG[NP1FATG], b_fampd[fampd]) ~ dnorm(0, 10),
cutpoints ~ dnorm(0, 10)
), data = model_df_na_free,
chains = 20, warmup = 10000, iter = 100000,
cores = 24, log_lik = TRUE, messages = FALSE
)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 10),
b_td_pigd[td_pigd] ~ dnorm(0, 10),
b_NHY[NHY] ~ dnorm(0, 10),
b_NP1FATG[NP1FATG] ~ dnorm(0, 10),
b_fampd[fampd] ~ dnorm(0, 10),
cutpoints ~ dnorm(0, 20)
), data = model_df_na_free,
chains = 20, warmup = 10000, iter = 100000,
cores = 24, log_lik = TRUE, messages = FALSE
)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 10),
b_td_pigd[td_pigd] ~ dnorm(0, 10),
b_NHY[NHY] ~ dnorm(0, 10),
b_NP1FATG[NP1FATG] ~ dnorm(0, 10),
b_fampd[fampd] ~ dnorm(0, 10),
cutpoints ~ dnorm(0, 1.5)
), data = model_df_na_free,
chains = 20, warmup = 10000, iter = 100000,
cores = 24, log_lik = TRUE, messages = FALSE
)
View(model_df_na_free)
source("D:/OneDrive - Personal/OneDrive/Desktop/110 2023 Fall Semester/300 Bayesian Statistics/Modeling the Parkinson's/modeling/ordinal-model.R", echo=TRUE)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 10),
b_td_pigd[td_pigd] ~ dnorm(0, 1.5),
b_NHY[NHY] ~ dnorm(0, 1.5),
b_NP1FATG[NP1FATG] ~ dnorm(0, 1.5),
b_fampd[fampd] ~ dnorm(0, 1.5),
cutpoints ~ dnorm(0, 1.5)
), data = model_df_na_free,
chains = 20, warmup = 10000, iter = 100000,
cores = 24, log_lik = TRUE, messages = FALSE
)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 1),
b_td_pigd[td_pigd] ~ dnorm(0, 1),
b_NHY[NHY] ~ dnorm(0, 1),
b_NP1FATG[NP1FATG] ~ dnorm(0, 1),
b_fampd[fampd] ~ dnorm(0, 1),
cutpoints ~ dnorm(0, 1)
), data = model_df_na_free,
chains = 20, warmup = 10000, iter = 100000,
cores = 24, log_lik = TRUE, messages = FALSE
)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd],
# + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 1),
b_td_pigd[td_pigd] ~ dnorm(0, 1),
# b_NHY[NHY] ~ dnorm(0, 1),
# b_NP1FATG[NP1FATG] ~ dnorm(0, 1),
# b_fampd[fampd] ~ dnorm(0, 1),
cutpoints ~ dnorm(0, 1)
), data = model_df_na_free,
chains = 4, warmup = 200, iter = 1000,
cores = 24, log_lik = TRUE, messages = FALSE
)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
# b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd],
# + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
# c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 1),
b_td_pigd[td_pigd] ~ dnorm(0, 1),
# b_NHY[NHY] ~ dnorm(0, 1),
# b_NP1FATG[NP1FATG] ~ dnorm(0, 1),
# b_fampd[fampd] ~ dnorm(0, 1),
cutpoints ~ dnorm(0, 1)
), data = model_df_na_free,
chains = 4, warmup = 200, iter = 1000,
cores = 24, log_lik = TRUE, messages = FALSE
)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
# b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd],
# + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
# c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 1),
b_td_pigd[td_pigd] ~ dnorm(0, 5),
# b_NHY[NHY] ~ dnorm(0, 1),
# b_NP1FATG[NP1FATG] ~ dnorm(0, 1),
# b_fampd[fampd] ~ dnorm(0, 1),
cutpoints ~ dnorm(0, 5)
), data = model_df_na_free,
chains = 4, warmup = 200, iter = 1000,
cores = 24, log_lik = TRUE, messages = FALSE
)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
# b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd],
# + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
# c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 1),
b_td_pigd[td_pigd] ~ dnorm(0, 1.5),
# b_NHY[NHY] ~ dnorm(0, 1),
# b_NP1FATG[NP1FATG] ~ dnorm(0, 1),
# b_fampd[fampd] ~ dnorm(0, 1),
cutpoints ~ dnorm(0, 0.5)
), data = model_df_na_free,
chains = 4, warmup = 200, iter = 1000,
cores = 24, log_lik = TRUE, messages = FALSE
)
traceplot(ordinal_model)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
# b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
# c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 1),
b_td_pigd[td_pigd] ~ dnorm(0, 1.5),
b_NHY[NHY] ~ dnorm(0, 1.5),
b_NP1FATG[NP1FATG] ~ dnorm(0, 1.5),
b_fampd[fampd] ~ dnorm(0, 1.5),
cutpoints ~ dnorm(0, 1)
), data = model_df_na_free,
chains = 4, warmup = 200, iter = 1000,
cores = 24, log_lik = TRUE, messages = FALSE
)
traceplot(ordinal_model)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 3),
b_td_pigd[td_pigd] ~ dnorm(0, 3),
b_NHY[NHY] ~ dnorm(0, 3),
b_NP1FATG[NP1FATG] ~ dnorm(0, 3),
b_fampd[fampd] ~ dnorm(0, 3),
cutpoints ~ dnorm(0, 1.5)
), data = model_df_na_free,
chains = 10, warmup = 5000, iter = 20000,
cores = 24, log_lik = TRUE, messages = FALSE
)
traceplot(ordinal_model)
precis(ordinal_model, depth = 2)
traceplot(ordinal_model)
# Complete-case ordinal model with linear regression
test_ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 3),
b_td_pigd[td_pigd] ~ dnorm(0, 3),
b_NHY[NHY] ~ dnorm(0, 3),
b_NP1FATG[NP1FATG] ~ dnorm(0, 3),
b_fampd[fampd] ~ dnorm(0, 3),
cutpoints ~ dnorm(0, 1.5)
), data = model_df_na_free,
chains = 4,
cores = 24, log_lik = TRUE, messages = FALSE
)
precis(test_ordinal_model)
precis(test_ordinal_model, depth = 2)
test_ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG] + b_fampd[fampd],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 3),
b_td_pigd[td_pigd] ~ dnorm(0, 3),
b_NHY[NHY] ~ dnorm(0, 3),
b_NP1FATG[NP1FATG] ~ dnorm(0, 3),
b_fampd[fampd] ~ dnorm(0, 3),
cutpoints ~ dnorm(0, 1.5)
), data = model_df_na_free,
chains = 7,
cores = 24, log_lik = TRUE
)
precis(test_ordinal_model)
precis(test_ordinal_model, depth = 2)
test_ordinal_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL + b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 2),
b_td_pigd[td_pigd] ~ dnorm(0, 2),
b_NHY[NHY] ~ dnorm(0, 2),
b_NP1FATG[NP1FATG] ~ dnorm(0, 2),
cutpoints ~ dnorm(0, 1.5)
), data = model_df_na_free,
chains = 7,
cores = 24, log_lik = TRUE
)
precis(test_ordinal_model, depth = 2)
traceplot(test_ordinal_model)
traceplot(test_ordinal_model)
traceplot(ordinal_model)
