position = position_jitter(width = 0.2),
alpha = 0.3, size = 0.5) +
geom_hline(yintercept = 0.10, color = "red", linetype = "dashed") +
theme_classic() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 3, height = 5, dpi = 1000)
# Plot the results
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2),
alpha = 0.3, size = 0.8) +
geom_hline(yintercept = 0.10, color = "red", linetype = "dashed") +
theme_classic() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 3, height = 5, dpi = 1000)
# Plot the results
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = 0.10, color = "red", linetype = "dashed") +
theme_classic() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 3, height = 5, dpi = 1000)
View(chi_square_results_CONCOHORT_filtered)
categorical_vars_selected <- names(chi_square_results_CONCOHORT_filtered$var2)
categorical_vars_selected
categorical_vars_selected <- list(chi_square_results_CONCOHORT_filtered$var2)
View(categorical_vars_selected)
categorical_vars_selected
categorical_vars_selected <- chi_square_results_CONCOHORT_filtered$var2
categorical_vars_selected
# Filter the strongly associated categorical variables from the original dataframe
categorical_vars_selected <- chi_square_results_CONCOHORT_filtered$var2
categorical_df_selected <- categorical_df[, categorical_vars_selected, drop = FALSE]
View(categorical_df_selected)
View(updated_numeric_df_selected)
View(categorical_df_selected)
# Filter the strongly associated categorical variables from the original dataframe
categorical_vars_selected <- chi_square_results_CONCOHORT_filtered$var2
categorical_vars_selected <- c("PATNO", categorical_vars_selected)
categorical_df_selected <- categorical_df[, categorical_vars_selected, drop = FALSE]
model_df <- merge(categorical_df_selected, # All categorical predictors
updated_numeric_df_selected, # Numeric predictors
by = "PATNO", all = TRUE)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
cor_df <- updated_numeric_df_selected %>% # Only tested on numerical data (non-continuous)
mutate(CONCOHORT = CONCOHORT + 1)
# Kendall's tau correlation
kendall_cor <- cor(cor_df, method = "kendall")
View(cor_df)
View(kendall_cor)
?corr
?cor
# Kendall's tau correlation
kendall_cor <- cor(cor_df, method = "pearson")
# Kendall's tau correlation
kendall_cor <- cor(cor_df, method = "kendall")
View(updated_numeric_df_selected)
View(numeric_df_selected)
View(data_class_dictionary)
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
cor_df <- numeric_df_selected %>% # Only tested on numerical data (non-continuous)
mutate(CONCOHORT = CONCOHORT + 1)
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
numeric_df_selected <- merge(numeric_df_selected, response_var_df, by = "PATNO")
View(numeric_df_selected)
df_selected <- df %>%
subset(select = -c(
# Basic info
SITE, EVENT_ID, YEAR, visit_date, age,
# History
educ, fampd_bin,
# Biologic examinations
abeta_LLOD, abeta_ULOD, ptau_LLOD, tau_LLOD,
# Age at biological examinations
agediag, ageonset, age_LP, age_DATSCAN, age_upsit,
# Data that are not shown for a certain group of patients
CSFSAA, con_caudate, con_putamen, con_striatum, DATSCAN_CAUDATE_L, DATSCAN_CAUDATE_R, DATSCAN_PUTAMEN_L, DATSCAN_PUTAMEN_R, ips_caudate, ips_putamen, ips_striatum, lowput_ratio, mean_caudate, mean_putamen, mean_striatum,
# Data that are specifically for PD patients (i.e., medications)
LEDD,
# Scores that only include ON and treated scores
hy_on, NHY_ON, pigd_on, td_pigd_on, updrs_totscore_on,
# Examination scores that have been summed up into a total score
updrs1_score, updrs2_score, updrs3_score, updrs3_score_on,
# Factor-adjusted score percentile
upsit_pctl, upsit_pctl15,
# Others
PRIMDIAG, duration, duration_yrs, DOMSIDE))
# A new data dictionary for df_selected was created as imported
# Variables are classified by their properties as listed in Data Class column
data_class_dictionary <- read_csv("data/ppmi_curated_data_dictionary_classified.csv")
# Because of the way the original data dictionary was structured
# Rows with Variable == NA are removed
data_class_dictionary <- data_class_dictionary[!is.na(data_class_dictionary$Variable), ]
# Remove variables that were removed due to extensive proportion of missing values
vars_large_na_proportion <- removed_column_list$column_name
data_class_dictionary <- data_class_dictionary[!data_class_dictionary$Variable %in% vars_large_na_proportion, ]
# Remove some other variables
data_class_dictionary <- data_class_dictionary[data_class_dictionary$Variable != "SITE", ]
# Modify the table a little bit more
data_class_dictionary$`Data Class`[data_class_dictionary$Variable == "MCI_testscores"] <- "numeric"
write_csv(data_class_dictionary, "data/ppmi_curated_data_dictionary_classified.csv")
# Select portions of df_selected based on variable's data class
numeric_vars <- data_class_dictionary$Variable[data_class_dictionary$`Data Class` %in% c('numeric', 'quantitative')]
numeric_vars <- unique(c("PATNO", numeric_vars))
binomial_vars <- data_class_dictionary$Variable[data_class_dictionary$`Data Class` == "binomial"]
binomial_vars <- unique(c("PATNO", binomial_vars))
ordered_vars <- data_class_dictionary$Variable[data_class_dictionary$`Data Class` == "ordered"]
ordered_vars <- unique(c("PATNO", ordered_vars))
qualitative_vars <- data_class_dictionary$Variable[data_class_dictionary$`Data Class` == "categorical"]
qualitative_vars <- unique(c("PATNO", qualitative_vars))
fundamental_vars <- data_class_dictionary$Variable[data_class_dictionary$`Data Class` == "fundamental"]
fundamental_vars <- unique(c("PATNO", fundamental_vars))
numeric_df_selected <- df_selected[, numeric_vars, drop = FALSE]
binomial_df_selected <- df_selected[, binomial_vars, drop = FALSE]
ordered_df_selected <- df_selected[, ordered_vars, drop = FALSE]
qualitative_df_selected <- df_selected[, qualitative_vars, drop = FALSE]
fundamental_df_selected <- df_selected[, fundamental_vars, drop = FALSE]
# Include binomal, ordered, and qualitative varaibles into all_qualitative_df_selected
all_qualitative_df_selected <- merge(binomial_df_selected, ordered_df_selected, by = "PATNO")
all_qualitative_df_selected <- merge(all_qualitative_df_selected, qualitative_df_selected, by = "PATNO")
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
cor_df <- numeric_df_selected %>% # Only tested on numerical data (non-continuous)
mutate(CONCOHORT = CONCOHORT + 1)
cor_df <- numeric_df_selected_CONCOHORT %>% # Only tested on numerical data (non-continuous)
mutate(CONCOHORT = CONCOHORT + 1)
# Kendall's tau correlation
cor_test <- cor(cor_df, method = "pearson")
# Kendall's tau correlation
cor_test <- cor(cor_df, method = "pearson")
# Convert all columns to numeical
numeric_df_selected_CONCOHORT <- lapply(numeric_df_selected_CONCOHORT, numeric)
# Convert all columns to numeical
numeric_df_selected_CONCOHORT <- lapply(numeric_df_selected_CONCOHORT, numeric)
numeric_df_selected_CONCOHORT <- as.data.frame(numeric_df_selected_CONCOHORT)
# CONCOHORT originally has two levels of 0 and 1
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
cor_df <- numeric_df_selected_CONCOHORT %>% # Only tested on numerical data (non-continuous)
mutate(CONCOHORT = CONCOHORT + 1)
# Convert all columns to numeical
numeric_df_selected_CONCOHORT <- lapply(numeric_df_selected_CONCOHORT, numeric)
# Convert all columns to numeical
numeric_df_selected_CONCOHORT <- lapply(numeric_df_selected_CONCOHORT, function(x) {
as.numeric(as.character(x))
})
numeric_df_selected_CONCOHORT <- as.data.frame(numeric_df_selected_CONCOHORT)
# Kendall's tau correlation
cor_test <- cor(cor_df, method = "pearson")
# Convert all columns to numeical
numeric_df_selected_CONCOHORT <- lapply(numeric_df_selected_CONCOHORT, function(x) {
as.numeric(as.character(x))
})
numeric_df_selected_CONCOHORT <- as.data.frame(numeric_df_selected_CONCOHORT)
View(numeric_df_selected_CONCOHORT)
# Add CONCOHORT column to the numeric dataframe
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
# Convert all columns to numeical
numeric_df_selected_CONCOHORT <- lapply(numeric_df_selected_CONCOHORT, function(x) {
as.numeric(as.character(x))
})
numeric_df_selected_CONCOHORT <- as.data.frame(numeric_df_selected_CONCOHORT)
# Kendall's tau correlation
cor_test <- cor(numeric_df_selected_CONCOHORT, method = "pearson")
View(cor_test)
as.numeric(as.character(x)),
# Convert all columns to numeical
numeric_df_selected_CONCOHORT <- lapply(numeric_df_selected_CONCOHORT, function(x) {
as.numeric(as.character(x)),
# Convert all columns to numeical
numeric_df_selected_CONCOHORT <- lapply(numeric_df_selected_CONCOHORT, function(x) {
as.numeric(as.character(x)),
as.numeric(as.character(x)) %>%
standardize(x)
# Convert all columns to numeical
numeric_df_selected_CONCOHORT <- lapply(numeric_df_selected_CONCOHORT, function(x) {
as.numeric(as.character(x)) %>%
standardize(x)
})
numeric_df_selected_CONCOHORT <- as.data.frame(lapply(numeric_df_selected_CONCOHORT, scale))
View(numeric_df_selected_CONCOHORT)
# Kendall's tau correlation
cor_test <- cor(numeric_df_selected_CONCOHORT, method = "pearson")
# Add CONCOHORT column to the numeric dataframe
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
# Convert all columns to numeical
numeric_df_selected_CONCOHORT <- as.data.frame(lapply(numeric_df_selected_CONCOHORT, function(x) {
as.numeric(as.character(x))
}))
# Kendall's tau correlation
cor_test <- cor(numeric_df_selected_CONCOHORT, method = "pearson")
View(numeric_df_selected_CONCOHORT)
# Kendall's tau correlation
cor_test <- cor(numeric_df_selected_CONCOHORT, method = "Speareman")
# Kendall's tau correlation
cor_test <- cor(numeric_df_selected_CONCOHORT, method = "spearman")
# Kendall's tau correlation
cor_test <- cor(numeric_df_selected_CONCOHORT, method = "pearsonf")
# Kendall's tau correlation
cor_test <- cor(numeric_df_selected_CONCOHORT, method = "pearson")
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
# Initialize a dataframe for the ANOVA results
anova_results <- data.frame(
Variable = character(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# Perform ANOVA for each variable
for (variable in setdiff(names(numeric_df_selected_CONCOHORT), "CONCOHORT")) {
anova_result <- aov(as.formula(paste(variable, " ~ CONCOHORT")), data = numeric_df_selected_CONCOHORT)
summary_result <- summary(anova_result)
p_value <- summary_result[[1]]$`Pr(>F)`[1]
new_row <- data.frame(Variable = variable, p_value = p_value, stringsAsFactors = FALSE)
anova_results <- rbind(anova_results, new_row)
}
View(numeric_df_selected_CONCOHORT)
numeric_df_selected_CONCOHORT[] <- lapply(numeric_df_selected_CONCOHORT, as.numeric)
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
numeric_df_selected_CONCOHORT[] <- lapply(numeric_df_selected_CONCOHORT, as.numeric)
numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(numeric_df_selected_CONCOHORT$CONCOHORT)
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
numeric_df_selected_CONCOHORT[] <- lapply(numeric_df_selected_CONCOHORT, as.numeric)
numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(numeric_df_selected_CONCOHORT$CONCOHORT)
View(numeric_df_selected_CONCOHORT)
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
numeric_df_selected_CONCOHORT[] <- lapply(numeric_df_selected_CONCOHORT, as.numeric)
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
View(numeric_df_selected_CONCOHORT)
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
numeric_df_selected_CONCOHORT[] <- lapply(numeric_df_selected_CONCOHORT, as.numeric)
numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(numeric_df_selected_CONCOHORT$CONCOHORT)
# Perform ANOVA for each variable
for (variable in setdiff(names(numeric_df_selected_CONCOHORT), "CONCOHORT")) {
anova_result <- aov(as.formula(paste(variable, " ~ CONCOHORT")), data = numeric_df_selected_CONCOHORT)
summary_result <- summary(anova_result)
p_value <- summary_result[[1]]$`Pr(>F)`[1]
new_row <- data.frame(Variable = variable, p_value = p_value, stringsAsFactors = FALSE)
anova_results <- rbind(anova_results, new_row)
}
View(numeric_df_selected)
numeric_df_selected <- df_selected[, numeric_vars, drop = FALSE]
colnames(numeric_df_selected) <- gsub("^[0-9]", "X\\0", colnames(numeric_df_selected))
View(numeric_df_selected)
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
numeric_df_selected_CONCOHORT[] <- lapply(numeric_df_selected_CONCOHORT, as.numeric)
numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(numeric_df_selected_CONCOHORT$CONCOHORT)
# Initialize a dataframe for the ANOVA results
anova_results <- data.frame(
Variable = character(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# Perform ANOVA for each variable
for (variable in setdiff(names(numeric_df_selected_CONCOHORT), "CONCOHORT")) {
anova_result <- aov(as.formula(paste(variable, " ~ CONCOHORT")), data = numeric_df_selected_CONCOHORT)
summary_result <- summary(anova_result)
p_value <- summary_result[[1]]$`Pr(>F)`[1]
new_row <- data.frame(Variable = variable, p_value = p_value, stringsAsFactors = FALSE)
anova_results <- rbind(anova_results, new_row)
}
colnames(numeric_df_selected) <- gsub("^_", "", colnames(numeric_df_selected))
numeric_df_selected <- df_selected[, numeric_vars, drop = FALSE]
colnames(numeric_df_selected) <- gsub("^_", "", colnames(numeric_df_selected))
colnames(numeric_df_selected) <- gsub("^[0-9]", "X\\0", colnames(numeric_df_selected))
View(numeric_df_selected)
numeric_df_selected_CONCOHORT <- merge(numeric_df_selected, response_var_df, by = "PATNO")
numeric_df_selected_CONCOHORT[] <- lapply(numeric_df_selected_CONCOHORT, as.numeric)
numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(numeric_df_selected_CONCOHORT$CONCOHORT)
View(numeric_df_selected_CONCOHORT)
# Initialize a dataframe for the ANOVA results
anova_results <- data.frame(
Variable = character(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# Perform ANOVA for each variable
for (variable in setdiff(names(numeric_df_selected_CONCOHORT), "CONCOHORT")) {
anova_result <- aov(as.formula(paste(variable, " ~ CONCOHORT")), data = numeric_df_selected_CONCOHORT)
summary_result <- summary(anova_result)
p_value <- summary_result[[1]]$`Pr(>F)`[1]
new_row <- data.frame(Variable = variable, p_value = p_value, stringsAsFactors = FALSE)
anova_results <- rbind(anova_results, new_row)
}
# Filter for significant associations
significant_anova_results <- anova_results %>%
filter(p_value <= 0.05)  # Adjust the significance level as needed
# Display the ANOVA results
head(anova_results)
# Display significant ANOVA results
head(significant_anova_results)
# Set aside PATNO column
cols_to_adjust <- setdiff(names(numeric_df_selected), "PATNO")
updated_numeric_df_selected <- numeric_df_selected
# Change all columns to numeric class
updated_numeric_df_selected[cols_to_adjust] <- lapply(updated_numeric_df_selected[cols_to_adjust],
function(x) as.numeric(as.character(x)))
# Standardize all numeric columns
updated_numeric_df_selected[cols_to_adjust] <- lapply(updated_numeric_df_selected[cols_to_adjust], scale)
# Filter for significant associations
significant_anova_results <- anova_results %>%
filter(p_value <= 0.05)  # Adjust the significance level as needed
# Display the ANOVA results
head(anova_results)
View(anova_results)
# Display significant ANOVA results
head(significant_anova_results)
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- c("PATNO", numeric_vars_selected)
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
numeric_vars_selected
numeric_vars_selected <- c("PATNO", numeric_vars_selected)
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
numeric_vars_selected <- c("PATNO", numeric_vars_selected)
categorical_vars_selected <- setdiff(categorical_vars_selected, "CONCOHORT")
# Filter the strongly associated categorical variables from the original dataframe
categorical_vars_selected <- chi_square_results_CONCOHORT_filtered$var2
categorical_vars_selected <- setdiff(categorical_vars_selected, "CONCOHORT")
# Filter the strongly associated categorical variables from the original dataframe
categorical_vars_selected <- chi_square_results_CONCOHORT_filtered$var2
categorical_vars_selected <- setdiff(categorical_vars_selected, "CONCOHORT")
categorical_vars_selected <- c("PATNO", categorical_vars_selected)
categorical_df_selected <- categorical_df[, categorical_vars_selected, drop = FALSE]
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
numeric_vars_selected <- c("PATNO", numeric_vars_selected)
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
# Standardize all columns except PATNO
updated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")] <- scaleupdated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")]
# Standardize all columns except PATNO
updated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")] <- scale(updated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")])
# Standardize all columns except PATNO
updated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")] <- scale(as.numeric((updated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")])))
updated_numeric_df_selected <- sapply(updated_numeric_df_selected, is.numeric)
updated_numeric_df_selected <- as.data.frame(updated_numeric_df_selected)
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
View(updated_numeric_df_selected)
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
numeric_vars_selected <- c("PATNO", numeric_vars_selected)
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
View(updated_numeric_df_selected)
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
numeric_vars_selected
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
View(updated_numeric_df_selected)
View(updated_numeric_df_selected)
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
# Standardize all columns except PATNO
standardize_cols <- names(updated_numeric_df_selected) != "PATNO"
standardize_cols
# Standardize all columns except PATNO
standardize_cols <- names(updated_numeric_df_selected) != "PATNO"
updated_numeric_df_selected[, standardize_cols] <- scale(updated_numeric_df_selected[, standardize_cols])
View(updated_numeric_df_selected)
# Merge all dataframes for modeling
model_df <- merge(categorical_df_selected, # All categorical predictors
updated_numeric_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
View(categorical_df_selected)
View(response_var_df)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
View(model_df)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
View(model_df)
model_df <- merge(categorical_df_selected, # All categorical predictors
updated_numeric_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
View(updated_numeric_df_selected)
model_df <- merge(categorical_df_selected, # All categorical predictors
updated_numeric_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
stepwise_model <- step(CONCOHORT ~., data = updated_numeric_df_selected)
# List of required packages
required_packages <- c("rethinking", "ggplot2", "viridis", "dplyr", "readr", "lubridate", "tidyr", "mosaic", "scales", "GGally", "lsr", "corrplot", "GGally", "gridExtra", "reshape2", "MASS")
# Function to install missing packages
install_missing_packages <- function(packages) {
installed <- rownames(installed.packages())
for (package in packages) {
if (!package %in% installed) {
install.packages(package)
}
}
}
# Install any missing packages
install_missing_packages(required_packages)
# Load the packages into the environment
for (package in required_packages) {
library(package, character.only = TRUE, quietly = TRUE)
}
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected, Hess = TRUE), direction = "both")
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, Hess = TRUE), direction = "both")
stepwise_model <- stepAIC(polr(as.factor(CONCOHORT) ~ ., data = updated_numeric_df_selected_CONCOHORT, Hess = TRUE), direction = "both")
stepwise_model <- stepAIC(polr(as.factor(CONCOHORT) ~ ., data = updated_numeric_df_selected_CONCOHORT, Hess = TRUE), direction = "both")
class(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
stepwise_model <- step(lm(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT), direction = "both")
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
stepwise_model <- step(lm(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT), direction = "both")
stepwise_model <- step(lm(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT), direction = "backward")
?polr
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE), direction = "both")
updated_numeric_df_selected_CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE), direction = "both")
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE), direction = "both")
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT) + 1
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
View(updated_numeric_df_selected_CONCOHORT)
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
View(updated_numeric_df_selected_CONCOHORT)
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT + 1)
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- updated_numeric_df_selected_CONCOHORT$CONCOHORT + 1
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- updated_numeric_df_selected_CONCOHORT$CONCOHORT + 1
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
View(updated_numeric_df_selected_CONCOHORT)
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE), direction = "both")
initial_values <- rep(0, ncol(updated_numeric_df_selected_CONCOHORT) - 1)
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE, start = initial_values), direction = "both")
initial_values <- rep(0, ncol(updated_numeric_df_selected_CONCOHORT) - 1)
fit <- polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE, start = initial_values)
fit <- polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE)
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- updated_numeric_df_selected_CONCOHORT$CONCOHORT + 1
stepwise_model <- step(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, direction = "both")
stepwise_model <- step(CONCOHORT ~ ., updated_numeric_df_selected_CONCOHORT, direction = "both")
?step
stepwise_model <- step(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, direction = "both", step = 10000)
fit <- lm(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT)
stepwise_model <- step(fit, direction = "both", step = 10000)
updated_numeric_df_selected_CONCOHORT <- na.omit(updated_numeric_df_selected_CONCOHORT)
fit <- lm(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT)
stepwise_model <- step(fit, direction = "both", step = 10000)
stepwise_model <- step(fit, direction = "both", step = 100000000)
best_subset_model <- regsubsets(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, nvmax = 20)
library(leaps)
best_subset_model <- regsubsets(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, nvmax = 20)
summary(best_subset_model)
best_subset_results <- summary(best_subset_model)
View(best_subset_model)
View(best_subset_results)
bset_results$bic)
data.frame(
Adj.R2 = which.max(best_subset_results$adjr2),
CP = which.min(best_subset_results$cp),
BIC = which.min(best_subset_results$bic)
)
View(updated_numeric_df_selected)
model_df <- merge(categorical_df_selected, # All categorical predictors
updated_numeric_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
