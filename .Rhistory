filter(critical_cor < cor_coef & -critical_cor > cor_coef)
View(strong_cor_numeric_df)
View(strong_cor_numeric_df)
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef)
View(strong_cor_numeric_df)
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef | critical_cor > cor_coef)
View(weak_cor_numeric_df)
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef)
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef)
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef)
View(strong_cor_numeric_df)
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2)
View(strong_cor_numeric_df)
View(strong_cor_numeric_df)
View(strong_cor_numeric_df)
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef)
View(strong_cor_numeric_df)
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2)
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO")
View(strong_cor_numeric_df)
View(strong_cor_numeric_df)
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO",
!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
View(strong_cor_numeric_df)
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO")
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO",
!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
View(strong_cor_numeric_df)
# Define 0.2 > r as weak correlation
critical_cor <- 0.1
# Dataframe of variables with strong correlation
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO",
!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef)
View(strong_cor_numeric_df)
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef)
View(weak_cor_numeric_df)
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
View(weak_cor_numeric_df)
numeric_vars_selected <- c(strong_cor_numeric_df$var2, weak_cor_numeric_df$var1, weak_cor_numeric_df$var2)
unique(numeric_vars_selected)
numeric_vars_selected <- unique(c(strong_cor_numeric_df$var2, weak_cor_numeric_df$var1, weak_cor_numeric_df$var2))
length(numeric_vars_selected)
final_numeric_df_selected <- updated_numeric_df_selected[, numeric_vars_selected, drop = FALSE]
View(final_numeric_df_selected)
final_numeric_df_selected <- updated_numeric_df_selected[, numeric_vars_selected, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
View(cor_results_df)
critical_cor <- 0.05
# Dataframe of variables with strong correlation
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO",
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
# Final dataframe contains all weakly correlated variables
# Plus selective variables from the strong correlated list
numeric_vars_selected <- unique(c(strong_cor_numeric_df$var2, weak_cor_numeric_df$var1, weak_cor_numeric_df$var2))
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, numeric_vars_selected, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
# Define 0.2 > r as weak correlation
critical_cor <- 0.05
# Dataframe of variables with strong correlation
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO",
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
# Final dataframe contains all weakly correlated variables
# Plus selective variables from the strong correlated list
numeric_vars_selected <- unique(c(strong_cor_numeric_df$var2, weak_cor_numeric_df$var1, weak_cor_numeric_df$var2))
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, numeric_vars_selected, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
# Define 0.2 > r as weak correlation
critical_cor <- 0.03
# Define 0.2 > r as weak correlation
critical_cor <- 0.03
# Dataframe of variables with strong correlation
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO",
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
# Final dataframe contains all weakly correlated variables
# Plus selective variables from the strong correlated list
numeric_vars_selected <- unique(c(strong_cor_numeric_df$var2, weak_cor_numeric_df$var1, weak_cor_numeric_df$var2))
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, numeric_vars_selected, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
# Define 0.2 > r as weak correlation
critical_cor <- 0.01
critical_cor <- 0.01
# Dataframe of variables with strong correlation
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO",
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
# Final dataframe contains all weakly correlated variables
# Plus selective variables from the strong correlated list
numeric_vars_selected <- unique(c(strong_cor_numeric_df$var2, weak_cor_numeric_df$var1, weak_cor_numeric_df$var2))
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, numeric_vars_selected, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
# Final dataframe contains all weakly correlated variables
# Plus selective variables from the strong correlated list
numeric_vars_selected <- unique(c(strong_cor_numeric_df$var2, weak_cor_numeric_df$var1, weak_cor_numeric_df$var2, "PATNO"))
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, numeric_vars_selected, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
View(final_numeric_df_selected)
View(final_numeric_df_selected)
# Remove one of the variable for each correlated pair
cor_numeric_df <- cor_results_df %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO",
!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
View(cor_numeric_df)
View(cor_numeric_df)
# Final dataframe contains all weakly correlated variables
# Plus selective variables from the strong correlated list
numeric_vars_selected <- unique(c(cor_numeric_df$var2, "PATNO"))
length(numeric_vars_selected)
# Remove one of the variable for each correlated pair
cor_numeric_df <- cor_results_df %>%
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
View(cor_numeric_df)
# Final dataframe contains all weakly correlated variables
# Plus selective variables from the strong correlated list
numeric_vars_selected <- unique(cor_numeric_df$var2)
length(numeric_vars_selected)
names(updated_numeric_df_selected)
View(cor_numeric_df)
# Final dataframe contains all weakly correlated variables
# Plus selective variables from the strong correlated list
numeric_vars_selected <- unique(cor_numeric_df$var1)
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, numeric_vars_selected, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
length(numeric_vars_selected)
numeric_vars_selected
# Remove one of the variable for each correlated pair
correlated_vars <- cor_results_df %>%
filter(var1 %in% c(var1, var2) | var2 %in% c(var1, var2)) %>%
distinct(var1, var2) %>%
summarise(correlated_vars = list(unique(c(var1, var2)))) %>%
pull(correlated_vars)
length(unique(correlated_vars))
correlated_vars
# Remove one of the variable for each correlated pair
correlated_vars <- cor_results_df %>%
filter(var1 %in% c(var1, var2) | var2 %in% c(var1, var2)) %>%
distinct(var1, var2) %>%
summarise(correlated_vars = list(unique(c(var1, var2))))
correlated_vars
View(correlated_vars)
# Remove one of the variable for each correlated pair
correlated_vars <- cor_results_df %>%
filter(var1 %in% c(var1, var2) | var2 %in% c(var1, var2)) %>%
distinct(var1, var2) %>%
summarise(correlated_vars = list(unique(c(var1, var2)))) %>%
pull(correlated_vars)
# Remove one of the variable for each correlated pair
correlated_vars <- cor_results_df %>%
filter(var1 %in% c(var1, var2) | var2 %in% c(var1, var2)) %>%
distinct(var1, var2) %>%
summarise(correlated_vars = list(unique(c(var1, var2)))) %>%
pull(correlated_vars)
class(correlated_vars)
selected_vars <- setdiff(unique(c(cor_results_df$var1, cor_results_df$var2)), correlated_vars)
selected_vars
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
weak_cor_numeric_df
View(weak_cor_numeric_df)
View(weak_cor_numeric_df)
# Define 0.2 > r as weak correlation
critical_cor <- 0.1
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
View(weak_cor_numeric_df)
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
View(weak_cor_numeric_df)
selected_vars <- unique(c(weak_cor_numeric_df$var1, weak_cor_numeric_df$var2))
selected_vars
View(weak_cor_numeric_df)
View(weak_cor_numeric_df)
# Define 0.2 > r as weak correlation
critical_cor <- 0.05
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
View(weak_cor_numeric_df)
selected_vars <- unique(c(weak_cor_numeric_df$var1, weak_cor_numeric_df$var2))
selected_vars
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, numeric_vars_selected, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
# # Dataframe of variables with strong correlation
# strong_cor_numeric_df <- cor_results_df %>%
#   filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
#   filter(var1 != var2,
#          var1 != "PATNO",
#          var2 != "PATNO",
#          # Select only one row out of two that have the same correlation (i.e., same pair but flipped)
#          !duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
#
# Dataframe of variables with strong correlation
strong_cor_numeric_df <- cor_results_df %>%
filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
filter(var1 != var2,
var1 != "PATNO",
var2 != "PATNO",
!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE),
!var2 %in% var1)
View(strong_cor_numeric_df)
View(strong_cor_numeric_df)
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
selected_vars <- unique(c(weak_cor_numeric_df$var1, weak_cor_numeric_df$var2))
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, numeric_vars_selected, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
names(final_numeric_df_selected)
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, selected_vars, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
final_numeric_df_selected
names(final_numeric_df_selected)
model_df <- merge(final_numeric_df_selected, # All categorical predictors
categorical_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
View(model_df)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
View(model_df)
fav_stats(model_df)
favstats(model_df)
summarise(model_df)
names(model_df)
# Plot variables selected by correlation
plot_numeric_df <- updated_numeric_df_selected %>%
mutate(color = ifelse(-critical_cor < cor_coef & critical_cor > cor_coef,
"Weak Correlation", "Strong Correlation"))
# Plot variables selected by correlation
plot_numeric_df <- cor_results_df %>%
mutate(color = ifelse(-critical_cor < cor_coef & critical_cor > cor_coef,
"Weak Correlation", "Strong Correlation"))
View(plot_numeric_df)
# Plot variables selected by correlation
plot_numeric_df <- cor_results_df %>%
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE)) %>%
mutate(color = ifelse(-critical_cor < cor_coef & critical_cor > cor_coef,
"Weak Correlation", "Strong Correlation"))
View(plot_numeric_df)
# Plot the results
numeric_correlation_plot <- ggplot(data = plot_numeric_df,
aes(y = cor_coef)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = upper_limit, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = upper_limit, label = paste("p-value = ", format(upper_limit, scientific = TRUE, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = "Association to `CONCOHORT`") +
theme(legend.position = "none",
axis.text.x = element_blank())
numeric_correlation_plot
# Plot the results
ggplot(data = plot_numeric_df, aes(y = cor_coef)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = critical_cor, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = critical_cor, label = paste("Critical r = ", format(critical_cor, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = "Association to `CONCOHORT`") +
theme(legend.position = "none",
axis.text.x = element_blank())
ggplot(data = plot_numeric_df, aes(y = cor_coef)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = critical_cor, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = critical_cor, label = paste("Critical r = ", format(critical_cor, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Strong Correlation" = "red",
"Weak Correlation" = "black")) +
labs(y = "Correlation Coefficient",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
# Plot the results
ggplot(data = plot_numeric_df, aes(x = NULL, y = cor_coef)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = critical_cor, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = critical_cor, label = paste("Critical r = ", format(critical_cor, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Strong Correlation" = "red",
"Weak Correlation" = "black")) +
labs(y = "Correlation Coefficient",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
View(plot_numeric_df)
# Plot the results
ggplot(data = plot_numeric_df, aes(x = 1, y = cor_coef)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = critical_cor, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = critical_cor, label = paste("Critical r = ", format(critical_cor, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Strong Correlation" = "red",
"Weak Correlation" = "black")) +
labs(y = "Correlation Coefficient",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
# Plot the results
numeric_correlation_plot <- ggplot(data = plot_numeric_df, aes(x = 1, y = cor_coef)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = critical_cor, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = critical_cor, label = paste("Critical r = ", format(critical_cor, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Strong Correlation" = "red",
"Weak Correlation" = "black")) +
labs(y = "Correlation Coefficient",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = numeric_correlation_plot,
width = 5, height = 5, dpi = 1000)
ggsave("figures/pre-analysis/numeric_correlation.png",
plot = numeric_correlation_plot,
width = 5, height = 5, dpi = 1000)
numeric_correlation_plot <- ggplot(data = plot_numeric_df, aes(x = 1, y = cor_coef)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = critical_cor, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = critical_cor, label = paste("Critical r = ", format(critical_cor, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Strong Correlation" = "red",
"Weak Correlation" = "black")) +
labs(y = "Correlation Coefficient",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/numeric_correlation.png",
plot = numeric_correlation_plot,
width = 5, height = 5, dpi = 1000)
View(final_numeric_df_selected)
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = upper_limit, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = upper_limit, label = paste("p-value = ", format(upper_limit, scientific = TRUE, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = "Association to `CONCOHORT`") +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 5, height = 5, dpi = 1000)
chi_square_results_CONCOHORT <- chi_square_results %>%
filter(var1 == "CONCOHORT")
# Determine the confidence interval for p-values
t_test <- t.test(chi_square_results_CONCOHORT_filtered$p_value)
upper_limit <- t_test$conf.int[2]
# Mark variables with a p-value smaller than the upper_limit as "significant association"
chi_square_results_CONCOHORT <- chi_square_results_CONCOHORT %>%
mutate(color = ifelse(p_value > upper_limit, "Insignificant Association", "Significant Association"))
# Select variables with a p-value smaller than the upper_limit (i.e., significant association to CONCOHORT)
chi_square_results_CONCOHORT_filtered <- chi_square_results_CONCOHORT %>%
filter(p_value <= upper_limit)
# Plot the results
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = upper_limit, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = upper_limit, label = paste("p-value = ", format(upper_limit, scientific = TRUE, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = "Association to `CONCOHORT`") +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 5, height = 5, dpi = 1000)
