theme(legend.position = "none",
axis.text.x = element_blank())
# Plot the results
numeric_correlation_plot <- ggplot(data = plot_numeric_df, aes(x = 1, y = cor_coef)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = critical_cor, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = critical_cor, label = paste("Critical r = ", format(critical_cor, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Strong Correlation" = "red",
"Weak Correlation" = "black")) +
labs(y = "Correlation Coefficient",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = numeric_correlation_plot,
width = 5, height = 5, dpi = 1000)
ggsave("figures/pre-analysis/numeric_correlation.png",
plot = numeric_correlation_plot,
width = 5, height = 5, dpi = 1000)
numeric_correlation_plot <- ggplot(data = plot_numeric_df, aes(x = 1, y = cor_coef)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = critical_cor, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = critical_cor, label = paste("Critical r = ", format(critical_cor, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Strong Correlation" = "red",
"Weak Correlation" = "black")) +
labs(y = "Correlation Coefficient",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/numeric_correlation.png",
plot = numeric_correlation_plot,
width = 5, height = 5, dpi = 1000)
View(final_numeric_df_selected)
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = upper_limit, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = upper_limit, label = paste("p-value = ", format(upper_limit, scientific = TRUE, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = "Association to `CONCOHORT`") +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 5, height = 5, dpi = 1000)
chi_square_results_CONCOHORT <- chi_square_results %>%
filter(var1 == "CONCOHORT")
# Determine the confidence interval for p-values
t_test <- t.test(chi_square_results_CONCOHORT_filtered$p_value)
upper_limit <- t_test$conf.int[2]
# Mark variables with a p-value smaller than the upper_limit as "significant association"
chi_square_results_CONCOHORT <- chi_square_results_CONCOHORT %>%
mutate(color = ifelse(p_value > upper_limit, "Insignificant Association", "Significant Association"))
# Select variables with a p-value smaller than the upper_limit (i.e., significant association to CONCOHORT)
chi_square_results_CONCOHORT_filtered <- chi_square_results_CONCOHORT %>%
filter(p_value <= upper_limit)
# Plot the results
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = upper_limit, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = upper_limit, label = paste("p-value = ", format(upper_limit, scientific = TRUE, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = "Association to `CONCOHORT`") +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 5, height = 5, dpi = 1000)
png("figures/pre-analysis/pearson_correlation.png",
width = 15000, height = 15000, res = 1000)
pearson_cor_plot <- corrplot.mixed(pearson_cor,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "square", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
source(package_prep.R)
source(packages_prep.R)
source(package_prep.R)
source("packages_prep.R")
?source
source(package_prep)
source(package_prep.R)
setwd("D:/OneDrive - Personal/OneDrive/Desktop/110 2023 Fall Semester/300 Bayesian Statistics/Modeling the Parkinson's")
source(package_prep.R)
source(package-prep.R)
source(package_prep.R)
source("package_prep.R")
png("figures/pre-analysis/pearson_correlation.png",
width = 15000, height = 15000, res = 1000)
pearson_cor_plot <- corrplot.mixed(pearson_cor,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "square", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
dev.off()
load(".RData")
# Numeric dataframe for correlation: updated_numeric_df_selected
# updated_numeric_df_selected was already filtered with ANOVA test
cor_df <- updated_numeric_df_selected %>%
lapply(., as.numeric) %>%
as.data.frame() %>%
na.omit()
source("package_prep.R")
# Numeric dataframe for correlation: updated_numeric_df_selected
# updated_numeric_df_selected was already filtered with ANOVA test
cor_df <- updated_numeric_df_selected %>%
lapply(., as.numeric) %>%
as.data.frame() %>%
na.omit()
# Compute correlation coefficient
pearson_cor <- cor(cor_df, method = "pearson")
# Plot in correlation matrix
png("figures/pre-analysis/pearson_correlation.png",
width = 15000, height = 15000, res = 1000)
pearson_cor_plot <- corrplot.mixed(pearson_cor,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "square", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
dev.off()
# Transform pearson_cor into dataframe
cor_results <- as.data.frame(pearson_cor)
cor_results$var1 <- rownames(cor_results)
cor_results_df <- pivot_longer(cor_results, cols = -var1,
names_to = "var2", values_to = "cor_coef")
# Define 0.2 > r as weak correlation
critical_cor <- 0.05
# # Dataframe of variables with strong correlation
# strong_cor_numeric_df <- cor_results_df %>%
#   filter(critical_cor < cor_coef | -critical_cor > cor_coef) %>%
#   filter(var1 != var2,
#          var1 != "PATNO",
#          var2 != "PATNO",
#          !duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE),
#          !var2 %in% var1)
# Dataframe of variables with weak correlation
weak_cor_numeric_df <- cor_results_df %>%
filter(-critical_cor < cor_coef & critical_cor > cor_coef) %>%
# Select only one row out of two that have the same correlation (i.e., same pair but flipped)
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE))
selected_vars <- unique(c(weak_cor_numeric_df$var1, weak_cor_numeric_df$var2))
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, selected_vars, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
# Plot variables selected by correlation
plot_numeric_df <- cor_results_df %>%
filter(!duplicated(cor_coef) | duplicated(cor_coef, fromLast = TRUE)) %>%
mutate(color = ifelse(-critical_cor < cor_coef & critical_cor > cor_coef,
"Weak Correlation", "Strong Correlation"))
# Plot the results
numeric_correlation_plot <- ggplot(data = plot_numeric_df, aes(x = 1, y = cor_coef)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = critical_cor, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = critical_cor, label = paste("Critical r = ", format(critical_cor, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_classic() +
scale_y_log10() +
scale_color_manual(values = c("Strong Correlation" = "red",
"Weak Correlation" = "black")) +
labs(y = "Correlation Coefficient",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/numeric_correlation.png",
plot = numeric_correlation_plot,
width = 5, height = 5, dpi = 1000)
upper_limit
length(numeric_vars_selected)
length(categorical_vars_selected)
length(names(model_df_updated))
names(model_df_updated)
## Complete-case model -----
model_df_updated <- model_df %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1),
X0_2__di_22_6_BMP = NULL,
total_di_22_6_BMP = NULL)
model_df_na_free <- na.omit(model_df_updated)
names(model_df_updated)
View(weak_cor_numeric_df)
View(cor_results_df)
View(weak_cor_numeric_df)
# Numeric dataframe for correlation: updated_numeric_df_selected
# updated_numeric_df_selected was already filtered with ANOVA test
cor_df <- updated_numeric_df_selected %>%
lapply(., as.numeric) %>%
as.data.frame() %>%
mutate(X0_2__di_22_6_BMP = NULL,
total_di_22_6_BMP = NULL)) %>%
# Numeric dataframe for correlation: updated_numeric_df_selected
# updated_numeric_df_selected was already filtered with ANOVA test
cor_df <- updated_numeric_df_selected %>%
lapply(., as.numeric) %>%
as.data.frame() %>%
mutate(X0_2__di_22_6_BMP = NULL,
total_di_22_6_BMP = NULL) %>%
na.omit()
# Compute correlation coefficient
pearson_cor <- cor(cor_df, method = "pearson")
# Plot in correlation matrix
png("figures/pre-analysis/pearson_correlation.png",
width = 15000, height = 15000, res = 1000)
pearson_cor_plot <- corrplot.mixed(pearson_cor,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "square", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
dev.off()
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
mutate(select(-MSEADLG))
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
select(-MSEADLG)
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
mutate(-MSEADLG)
View(cor_df_updated)
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
select(-MSEADLG)
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
dplyr::select(-MSEADLG)
View(cor_df_updated)
pearson_cor_updated <- cor(cor_df_updated, method = "pearson")
corrplot.mixed(cor_df_updated,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "square", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
corrplot.mixed(pearson_cor_updated,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "square", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
View(data_class_dictionary)
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
dplyr::select(-MSEADLG, -scopa_gi)
pearson_cor_updated <- cor(cor_df_updated, method = "pearson")
corrplot.mixed(pearson_cor_updated,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "square", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
png("figures/pre-analysis/pearson_correlation.png",
width = 15000, height = 15000, res = 1000)
pearson_cor_plot <- corrplot.mixed(pearson_cor,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "pie", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
dev.off()
corrplot.mixed(pearson_cor_updated,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "pie", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
names(cor_df_updated)
names(final_numeric_df_selected)
length(categorical_vars_selected)
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
dplyr::select(-MSEADLG, -scopa_gi, -pigd)
pearson_cor_updated <- cor(cor_df_updated, method = "pearson")
corrplot.mixed(pearson_cor_updated,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "pie", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
dplyr::select(-scopa_gi, -pigd)
pearson_cor_updated <- cor(cor_df_updated, method = "pearson")
corrplot.mixed(pearson_cor_updated,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "pie", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
dplyr::select(-MSEADLG, -scopa_gi, -pigd)
pearson_cor_updated <- cor(cor_df_updated, method = "pearson")
corrplot.mixed(pearson_cor_updated,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "pie", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
# Standardize all columns except PATNO
standardize_cols <- names(updated_numeric_df_selected) != "PATNO"
updated_numeric_df_selected[, standardize_cols] <- scale(updated_numeric_df_selected[, standardize_cols])
length(numeric_vars_selected)
# Numeric dataframe for correlation: updated_numeric_df_selected
# updated_numeric_df_selected was already filtered with ANOVA test
cor_df <- updated_numeric_df_selected %>%
lapply(., as.numeric) %>%
as.data.frame() %>%
mutate(X0_2__di_22_6_BMP = NULL,
total_di_22_6_BMP = NULL) %>%
na.omit()
# Compute correlation coefficient
pearson_cor <- cor(cor_df, method = "pearson")
# Plot in correlation matrix
png("figures/pre-analysis/pearson_correlation.png",
width = 15000, height = 15000, res = 1000)
pearson_cor_plot <- corrplot.mixed(pearson_cor,
upper = "number", upper.col = viridis(20, option = "C"),
lower = "pie", lower.col = viridis(20, option = "C"),
tl.pos = "d",
tl.col = "black")
dev.off()
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
dplyr::select(-MSEADLG, -scopa_gi, -pigd)
names(cor_df_updated)
length(categorical_vars_selected)
categorical_vars_selected
# Remove variables and create new correlation plot
cor_df_updated <- cor_df %>%
dplyr::select(-MSEADLG, -scopa_gi, -pigd)
selected_vars <- unique(names(cor_df_updated))
selected_vars
selected_vars <- unique(names(cor_df_updated))
# Create the final filtered numeric dataframe
final_numeric_df_selected <- updated_numeric_df_selected[, selected_vars, drop = FALSE] %>%
mutate(PATNO = as.character(PATNO))
View(final_numeric_df_selected)
# Merge all dataframes for modeling
model_df <- merge(final_numeric_df_selected, # All categorical predictors
categorical_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
## Complete-case model -----
model_df_updated <- model_df %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
names(model_df_updated)
nrow(model_df_updated)
nrow(raw_df)
nrow(df_selected)
View(df_selected)
model_df_na_free <- na.omit(model_df_updated)
nrow(model_df_na_free)
nrow(subset(model_df_na_free, CONCOHORT == 1))
nrow(subset(model_df_na_free, CONCOHORT == 2))
nrow(subset(model_df_na_free, CONCOHORT == 3))
nrow(subset(model_df_updated, CONCOHORT == 1))
nrow(subset(model_df_updated, CONCOHORT == 2))
nrow(subset(model_df_updated, CONCOHORT == 3))
# Complete-case ordinal model without linear regression
ordinal_model_plain <- ulam(
alist(
CONCOHORT ~ dordlogit(0, cutpoints),
cutpoints ~ dnorm(0, 1.5)
), data = model_df_na_free,
chains = 4, warmup = 2000, iter = 4000,
cores = 24, log_lik = TRUE, messages = FALSE
)
install.packages("mingw32-make")
install_cmdstan("mingw32-make")
install.packages("g++")
install.packages("Rtools")
rtool
install.packages("mingw32-make", type = "source")
mingw32-make --version
clinfo
clinfo
# Complete-case ordinal model without linear regression
ordinal_model_plain <- ulam(
alist(
CONCOHORT ~ dordlogit(0, cutpoints),
cutpoints ~ dnorm(0, 10)
), data = model_df_na_free,
chains = 4, warmup = 5000, iter = 20000,
cores = 24, log_lik = TRUE, messages = FALSE
)
model_df_na_free$PDTRTMNT
unique(model_df_na_free$PDTRTMNT)
View(model_df_na_free)
# Complete-case ordinal model with linear regression
test_model <- ulam(
alist(
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <- b_scopa * scopa + b_PDTRTMNT[PDTRTMNT],
b_scopa ~ dnorm(0, 1),
b_PDTRTMNT[PDTRTMNT] ~ dnorm(0, 1),
cutpoints ~ dnorm(0, 1)
), data = model_df_na_free
)
precis(test_model, depth = 2)
inv_logit(coef(test_model))
View(model_df_updated)
names(model_df_updated)
nrow(is.na(model_df_updated$ASHKJEW))
length(is.na(model_df_updated$ASHKJEW))
## Complete-case model -----
model_df_updated <- model_df %>%
dplyr::select(-PDTRTMNT, -ASHKJEW) %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
## Complete-case model -----
model_df_updated <- model_df %>%
select(-PDTRTMNT, -ASHKJEW) %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
dplyr::select(-c(PDTRTMNT, ASHKJEW) %>%
## Complete-case model -----
model_df_updated <- model_df %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW)) %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
names(model_df)
model_df_updated <- model_df %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW))
## Complete-case model -----
model_df_updated <- model_df %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW))
names(model_df_updated)
is.na(model_df_updated$hy)
sum(is.na(model_df_updated$hy]))
sum(is.na(model_df_updated$hy))
sum(is.na(model_df_updated$NHY))
names(model_df_updated)
## Complete-case model -----
model_df_updated <- model_df %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW, hy))
names(model_df_updated)
sum(is.na(model_df_updated))
sum(is.na(model_df_updated[,]))
lapply(model_df_updated, sum(is.na))
lapply(model_df_updated, is.na)
test <- lapply(model_df_updated, is.na)
sum(test)
lapply(test, sum)
## Complete-case model -----
model_df_updated <- model_df %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW, hy, upsit))
names(model_df_updated)
model_df_updated <- model_df_updated %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
## Complete-case model -----
model_df_updated <- model_df_updated %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW, hy, upsit)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
## Complete-case model -----
model_df_updated <- model_df %>%
# Convert categorical columns to integers
mutate(across(all_of(categorical_vars_selected), as.integer)) %>%
# Convert numerical columns to numeric
mutate(across(all_of(selected_vars), as.numeric)) %>%
dplyr::select(-c(PDTRTMNT, ASHKJEW, hy, upsit)) %>%
mutate(CONCOHORT = as.integer(CONCOHORT + 1))
model_df_na_free <- na.omit(model_df_updated)
nrow(model_df_na_free)
