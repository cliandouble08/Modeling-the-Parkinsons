ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
viridis::viridis.map
# Density plot for na_proportion
density_plot_na_proportion <- ggplot(data = naCount_raw_df) +
geom_density(aes(x = na_proportion), fill = "lightyellow", lwd = 0.8) +
geom_vline(xintercept = 0.10, linewidth = 2, linetype = "dashed") +
xlim(0, 1) +
labs(title = "Proportion of NA Values in Original Dataframe",
x = "Proportion of NA values",
y = "Density") +
theme_classic()
ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
# Density plot for na_proportion
density_plot_na_proportion <- ggplot(data = naCount_raw_df) +
geom_density(aes(x = na_proportion), fill = "lightyellow", lwd = 1) +
geom_vline(xintercept = 0.10, linewidth = 1, linetype = "dashed", color = "darkred", alpha = 0.7) +
xlim(0, 1) +
labs(title = "Proportion of NA Values in Original Dataframe",
x = "Proportion of NA values",
y = "Density") +
theme_classic()
ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
# Density plot for na_proportion
density_plot_na_proportion <- ggplot(data = naCount_raw_df) +
geom_density(aes(x = na_proportion), lwd = 1) +
geom_vline(xintercept = 0.10, linewidth = 1, linetype = "dashed", color = "darkred", alpha = 0.5) +
xlim(0, 1) +
labs(title = "Proportion of NA Values in Original Dataframe",
x = "Proportion of NA values",
y = "Density") +
theme_classic()
ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
# Density plot for na_proportion
density_plot_na_proportion <- ggplot(data = naCount_raw_df) +
geom_density(aes(x = na_proportion), lwd = 1) +
geom_rect(aes(xmin = 0.10, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "darkred", alpha = 0.2) +
# geom_vline(xintercept = 0.10, linewidth = 1, linetype = "dashed", color = "darkred", alpha = 0.5) +
xlim(0, 1) +
labs(title = "Proportion of NA Values in Original Dataframe",
x = "Proportion of NA values",
y = "Density") +
theme_par()
ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
install.packages("ggthemes")
library("ggthemes")
library(ggthemes)
# Density plot for na_proportion
density_plot_na_proportion <- ggplot(data = naCount_raw_df) +
geom_density(aes(x = na_proportion), lwd = 1) +
geom_rect(aes(xmin = 0.10, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "darkred", alpha = 0.2) +
# geom_vline(xintercept = 0.10, linewidth = 1, linetype = "dashed", color = "darkred", alpha = 0.5) +
xlim(0, 1) +
labs(title = "Proportion of NA Values in Original Dataframe",
x = "Proportion of NA values",
y = "Density") +
theme_par()
ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
# Density plot for na_proportion
density_plot_na_proportion <- ggplot(data = naCount_raw_df) +
geom_rect(aes(xmin = 0.10, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "darkred", alpha = 0.1) +
geom_density(aes(x = na_proportion), lwd = 1) +
# geom_vline(xintercept = 0.10, linewidth = 1, linetype = "dashed", color = "darkred", alpha = 0.5) +
xlim(0, 1) +
labs(title = "Proportion of NA Values in Original Dataframe",
x = "Proportion of NA values",
y = "Density") +
theme_par()
ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
# Density plot for na_proportion
density_plot_na_proportion <- ggplot(data = naCount_raw_df) +
geom_rect(aes(xmin = 0.10, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightpink", alpha = 0.1) +
geom_density(aes(x = na_proportion), lwd = 1) +
# geom_vline(xintercept = 0.10, linewidth = 1, linetype = "dashed", color = "darkred", alpha = 0.5) +
xlim(0, 1) +
labs(title = "Proportion of NA Values in Original Dataframe",
x = "Proportion of NA values",
y = "Density") +
theme_par()
ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
# Density plot for na_proportion
density_plot_na_proportion <- ggplot(data = naCount_raw_df) +
geom_rect(aes(xmin = 0.10, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightpink", alpha = 0.1) +
geom_density(aes(x = na_proportion), lwd = 1) +
# geom_vline(xintercept = 0.10, linewidth = 1, linetype = "dashed", color = "darkred", alpha = 0.5) +
annotate("text", x = 0.10, y = Inf, label = "10%", vjust = -0.2, hjust = 1) +
xlim(0, 1) +
labs(title = "Proportion of NA Values in Original Dataframe",
x = "Proportion of NA values",
y = "Density") +
theme_par()
ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
# Density plot for na_proportion
density_plot_na_proportion <- ggplot(data = naCount_raw_df) +
geom_rect(aes(xmin = 0.10, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightpink", alpha = 0.1) +
geom_density(aes(x = na_proportion), lwd = 1) +
# geom_vline(xintercept = 0.10, linewidth = 1, linetype = "dashed", color = "darkred", alpha = 0.5) +
xlim(0, 1) +
labs(title = "Proportion of NA Values in Original Dataframe",
x = "Proportion of NA values",
y = "Density") +
theme_par()
ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
# Create a pie chart for df_column_class summary
pie_chart_column_class <- ggplot(df_column_class_summary,
aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = class)) +
geom_rect() +
geom_text(x = 2,
aes(y = label_position,
label = label),
color = "black",
size = 3) +
coord_polar(theta = "y") +
xlim(1, 4) +
labs(title = "Proportion of Each Variable Class in Original Dataframe",
fill = "Varialbe Class",
y = "Class Proportion",
x = NULL) +
scale_fill_viridis(discrete = TRUE) +
theme_par() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave("figures/pre-analysis/pie_column_class.png",
plot = pie_chart_column_class,
width = 5, height = 5, dpi = 1000)
# Class of each column
# Get the class of each column
column_classes <- sapply(df, class)
# Create a new dataframe with the column number, name, and class
df_column_class <- data.frame(
column_number = seq_along(df),
column_name = names(df),
class = column_classes,
stringsAsFactors = FALSE,
row.names = NULL
)
# Summarize the number of columns for each class
df_column_class_summary <- df_column_class %>%
group_by(class) %>%
summarise(count = n()) %>%
mutate(class_proportion = count / sum(count),
ymax = cumsum(class_proportion),
ymin = c(0, head(ymax, n = -1)),
label_position = (ymax + ymin) / 2,
label = paste0(class, "\n", percent(class_proportion, accuracy = 0.01)))
library(dplyr)
# Class of each column
# Get the class of each column
column_classes <- sapply(df, class)
# Create a new dataframe with the column number, name, and class
df_column_class <- data.frame(
column_number = seq_along(df),
column_name = names(df),
class = column_classes,
stringsAsFactors = FALSE,
row.names = NULL
)
# Summarize the number of columns for each class
df_column_class_summary <- df_column_class %>%
group_by(class) %>%
summarise(count = n()) %>%
mutate(class_proportion = count / sum(count),
ymax = cumsum(class_proportion),
ymin = c(0, head(ymax, n = -1)),
label_position = (ymax + ymin) / 2,
label = paste0(class, "\n", percent(class_proportion, accuracy = 0.01)))
# List of required packages
required_packages <- c("rethinking", "ggplot2", "viridis", "dplyr", "readr", "lubridate", "tidyr", "mosaic", "scales", "GGally", "lsr", "corrplot", "GGally", "gridExtra", "reshape2", "MASS", "corrplot", "ggthemes")
# List of required packages
required_packages <- c("rethinking", "ggplot2", "viridis", "dplyr", "readr", "lubridate", "tidyr", "mosaic", "scales", "GGally", "lsr", "corrplot", "GGally", "gridExtra", "reshape2", "MASS", "corrplot", "ggthemes")
# Function to install missing packages
install_missing_packages <- function(packages) {
installed <- rownames(installed.packages())
for (package in packages) {
if (!package %in% installed) {
install.packages(package)
}
}
}
# Install any missing packages
install_missing_packages(required_packages)
# Load the packages into the environment
for (package in required_packages) {
library(package, character.only = TRUE, quietly = TRUE)
}
# Class of each column
# Get the class of each column
column_classes <- sapply(df, class)
# Create a new dataframe with the column number, name, and class
df_column_class <- data.frame(
column_number = seq_along(df),
column_name = names(df),
class = column_classes,
stringsAsFactors = FALSE,
row.names = NULL
)
# Summarize the number of columns for each class
df_column_class_summary <- df_column_class %>%
group_by(class) %>%
summarise(count = n()) %>%
mutate(class_proportion = count / sum(count),
ymax = cumsum(class_proportion),
ymin = c(0, head(ymax, n = -1)),
label_position = (ymax + ymin) / 2,
label = paste0(class, "\n", percent(class_proportion, accuracy = 0.01)))
# Create a pie chart for df_column_class summary
pie_chart_column_class <- ggplot(df_column_class_summary,
aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = class)) +
geom_rect() +
geom_text(x = 2,
aes(y = label_position,
label = label),
color = "black",
size = 3) +
coord_polar(theta = "y") +
xlim(1, 4) +
labs(title = "Proportion of Each Variable Class in Original Dataframe",
fill = "Varialbe Class",
y = "Class Proportion",
x = NULL) +
scale_fill_viridis(discrete = TRUE) +
theme_par() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave("figures/pre-analysis/pie_column_class.png",
plot = pie_chart_column_class,
width = 5, height = 5, dpi = 1000)
# Create a pie chart for df_column_class summary
pie_chart_column_class <- ggplot(df_column_class_summary,
aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = class)) +
geom_rect() +
geom_text(x = 2,
aes(y = label_position,
label = label),
color = "black",
size = 3) +
coord_polar(theta = "y") +
xlim(1, 4) +
labs(fill = "Varialbe Class",
y = "Class Proportion",
x = NULL) +
scale_fill_viridis(discrete = TRUE) +
theme_par() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank())
ggsave("figures/pre-analysis/pie_column_class.png",
plot = pie_chart_column_class,
width = 5, height = 5, dpi = 1000)
ggsave("figures/pre-analysis/pie_column_class.png",
plot = pie_chart_column_class,
width = 8, height = 5, dpi = 1000)
ggsave("figures/pre-analysis/pie_column_class.png",
plot = pie_chart_column_class,
width = 5, height = 5, dpi = 1000)
# Density plot for na_proportion
density_plot_na_proportion <- ggplot(data = naCount_raw_df) +
geom_rect(aes(xmin = 0.10, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightpink", alpha = 0.1) +
geom_density(aes(x = na_proportion), lwd = 1) +
# geom_vline(xintercept = 0.10, linewidth = 1, linetype = "dashed", color = "darkred", alpha = 0.5) +
xlim(0, 1) +
labs(x = "Proportion of NA values",
y = "Density") +
theme_par()
ggsave("figures/pre-analysis/density-na-proportion.png",
plot = density_plot_na_proportion,
width = 5, height = 5, dpi = 1000)
# Create a pie chart for df_column_class summary
pie_chart_column_class <- ggplot(df_column_class_summary,
aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = class)) +
geom_rect() +
geom_text(x = 2,
aes(y = label_position,
label = label),
color = "black",
size = 3) +
coord_polar(theta = "y") +
xlim(1, 4) +
labs(fill = "Varialbe Class",
y = "Class Proportion",
x = NULL) +
scale_fill_viridis(discrete = TRUE) +
theme_par() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.position = "left")
ggsave("figures/pre-analysis/pie_column_class.png",
plot = pie_chart_column_class,
width = 5, height = 5, dpi = 1000)
# Plot the results
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = upper_limit, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = upper_limit, label = paste("p-value = ", format(upper_limit, scientific = TRUE, digits = 3))),
vjust = 1.5, hjust = 1, color = "darkred", size = rel(3)) +
theme_par() +
scale_y_log10() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = "Association to `CONCOHORT`") +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 5, height = 5, dpi = 1000)
# Plot the results
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = upper_limit, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = upper_limit, label = paste("p-value = ", format(upper_limit, scientific = TRUE, digits = 3))),
vjust = 1.5, hjust = 1.1, color = "darkred", size = rel(3)) +
theme_par() +
scale_y_log10() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = "Association to `CONCOHORT`") +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 5, height = 5, dpi = 1000)
# Plot the results
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = upper_limit, color = "darkred", linetype = "dashed", lwd = 1) +
geom_text(aes(x = Inf, y = upper_limit, label = paste("p-value = ", format(upper_limit, scientific = TRUE, digits = 3))),
vjust = 1.5, hjust = 1.02, color = "darkred", size = rel(3)) +
theme_par() +
scale_y_log10() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = "Association to `CONCOHORT`") +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 5, height = 5, dpi = 1000)
View(model_df_na_free)
# Dataframe to check outliers for: model_df_na_free
count_outliers <- function(column) {
Q1 <- quantile(column, 0.25)
Q3 <- quantile(column, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column < lower_bound | column > upper_bound
return(sum(outliers))
}
outlier_counts <- data.frame(variable = colnames(model_df_na_free))
outlier_counts$outlier_count <- sapply(model_df_na_free, count_outliers)
View(outlier_counts)
# Dataframe to check outliers for: model_df_na_free
count_outliers <- function(column) {
Q1 <- quantile(column, 0.25)
Q3 <- quantile(column, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column < lower_bound | column > upper_bound
return(sum(outliers))
}
outlier_counts <- data.frame(variable = colnames(model_df_na_free))
outlier_counts$total_count <- sapply(model_df_na_free, nrow)
outlier_counts$outlier_count <- sapply(model_df_na_free, count_outliers)
# Dataframe to check outliers for: model_df_na_free
count_outliers <- function(column) {
Q1 <- quantile(column, 0.25)
Q3 <- quantile(column, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column < lower_bound | column > upper_bound
return(sum(outliers))
}
outlier_counts <- data.frame(variable = colnames(model_df_na_free))
outlier_counts$total_count <- sapply(model_df_na_free, function(column) nrow(model_df_na_free))
outlier_counts$outlier_count <- sapply(model_df_na_free, count_outliers)
View(outlier_counts)
View(outlier_counts)
outlier_counts$outlier_count <- sapply(model_df_na_free, count_outliers) %>%
mutate(outlier_proportion = outlier_count / total_count)
outlier_counts$outlier_count <- sapply(model_df_na_free, count_outliers) %>%
mutate(outlier_count = as.numeric(outlier_count),
total_count = as.numeric(total_count),
outlier_proportion = outlier_count / total_count)
outlier_counts$outlier_count <- sapply(model_df_na_free, count_outliers) %>%
mutate(outlier_proportion = outlier_count / total_count)
# Dataframe to check outliers for: model_df_na_free
count_outliers <- function(column) {
Q1 <- quantile(column, 0.25)
Q3 <- quantile(column, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- column < lower_bound | column > upper_bound
return(sum(outliers))
}
outlier_counts <- data.frame(variable = colnames(model_df_na_free))
outlier_counts$total_count <- sapply(model_df_na_free, function(column) nrow(model_df_na_free))
outlier_counts$outlier_count <- sapply(model_df_na_free, count_outliers)
outlier_counts$outlier_proportion <- outlier_counts$outlier_count / outlier_counts$total_count
View(outlier_counts)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
# Ordinal model
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL +
b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 3),
b_td_pigd[td_pigd] ~ dnorm(0, 3),
b_NHY[NHY] ~ dnorm(0, 3),
b_NP1FATG[NP1FATG] ~ dnorm(0, 3),
cutpoints ~ dnorm(0, 1.5)
), data = model_df_na_free,
chains = 20, warmup = 2000, iter = 6000,
cores = 24, log_lik = TRUE
)
precis(ordinal_model, depth = 2)
cutpoints_inv_logit <- format(inv_logit(coef(ordinal_model)), digits = 3)
ordinal_posterior <- extract.samples(ordinal_model)
ordinal_precis <- precis(ordinal_model, depth = 2)
View(ordinal_precis)
# Complete-case ordinal model with linear regression
ordinal_model <- ulam(
alist(
# Ordinal model
CONCOHORT ~ dordlogit(phi, cutpoints),
phi <-
# Numerical variables
b_scopa * scopa + b_SDMTOTAL * SDMTOTAL +
b_stai_state * stai_state + b_updrs_totscore * updrs_totscore +
# Categorical variables
b_td_pigd[td_pigd] + b_NHY[NHY] + b_NP1FATG[NP1FATG],
c(b_scopa, b_SDMTOTAL, b_stai_state, b_updrs_totscore) ~ dnorm(0, 3),
b_td_pigd[td_pigd] ~ dnorm(0, 3),
b_NHY[NHY] ~ dnorm(0, 3),
b_NP1FATG[NP1FATG] ~ dnorm(0, 3),
cutpoints ~ dnorm(0, 1.5)
), data = model_df_na_free,
chains = 24, warmup = 3000, iter = 15000,
cores = 24, log_lik = TRUE
)
ordinal_precis <- precis(ordinal_model, depth = 2)
cutpoints_inv_logit <- format(inv_logit(coef(ordinal_model)), digits = 3)
ordinal_posterior <- extract.samples(ordinal_model)
