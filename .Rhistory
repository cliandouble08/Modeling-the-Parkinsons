Variable = character(),
p_value = numeric(),
stringsAsFactors = FALSE
)
# Perform ANOVA for each variable
for (variable in setdiff(names(numeric_df_selected_CONCOHORT), "CONCOHORT")) {
anova_result <- aov(as.formula(paste(variable, " ~ CONCOHORT")), data = numeric_df_selected_CONCOHORT)
summary_result <- summary(anova_result)
p_value <- summary_result[[1]]$`Pr(>F)`[1]
new_row <- data.frame(Variable = variable, p_value = p_value, stringsAsFactors = FALSE)
anova_results <- rbind(anova_results, new_row)
}
# Filter for significant associations
significant_anova_results <- anova_results %>%
filter(p_value <= 0.05)  # Adjust the significance level as needed
# Display the ANOVA results
head(anova_results)
# Display significant ANOVA results
head(significant_anova_results)
# Set aside PATNO column
cols_to_adjust <- setdiff(names(numeric_df_selected), "PATNO")
updated_numeric_df_selected <- numeric_df_selected
# Change all columns to numeric class
updated_numeric_df_selected[cols_to_adjust] <- lapply(updated_numeric_df_selected[cols_to_adjust],
function(x) as.numeric(as.character(x)))
# Standardize all numeric columns
updated_numeric_df_selected[cols_to_adjust] <- lapply(updated_numeric_df_selected[cols_to_adjust], scale)
# Filter for significant associations
significant_anova_results <- anova_results %>%
filter(p_value <= 0.05)  # Adjust the significance level as needed
# Display the ANOVA results
head(anova_results)
View(anova_results)
# Display significant ANOVA results
head(significant_anova_results)
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- c("PATNO", numeric_vars_selected)
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
numeric_vars_selected
numeric_vars_selected <- c("PATNO", numeric_vars_selected)
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
numeric_vars_selected <- c("PATNO", numeric_vars_selected)
categorical_vars_selected <- setdiff(categorical_vars_selected, "CONCOHORT")
# Filter the strongly associated categorical variables from the original dataframe
categorical_vars_selected <- chi_square_results_CONCOHORT_filtered$var2
categorical_vars_selected <- setdiff(categorical_vars_selected, "CONCOHORT")
# Filter the strongly associated categorical variables from the original dataframe
categorical_vars_selected <- chi_square_results_CONCOHORT_filtered$var2
categorical_vars_selected <- setdiff(categorical_vars_selected, "CONCOHORT")
categorical_vars_selected <- c("PATNO", categorical_vars_selected)
categorical_df_selected <- categorical_df[, categorical_vars_selected, drop = FALSE]
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
numeric_vars_selected <- c("PATNO", numeric_vars_selected)
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
# Standardize all columns except PATNO
updated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")] <- scaleupdated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")]
# Standardize all columns except PATNO
updated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")] <- scale(updated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")])
# Standardize all columns except PATNO
updated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")] <- scale(as.numeric((updated_numeric_df_selected[, -which(names(updated_numeric_df_selected) == "PATNO")])))
updated_numeric_df_selected <- sapply(updated_numeric_df_selected, is.numeric)
updated_numeric_df_selected <- as.data.frame(updated_numeric_df_selected)
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
View(updated_numeric_df_selected)
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
numeric_vars_selected <- c("PATNO", numeric_vars_selected)
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
View(updated_numeric_df_selected)
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
numeric_vars_selected
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
View(updated_numeric_df_selected)
View(updated_numeric_df_selected)
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
# Standardize all columns except PATNO
standardize_cols <- names(updated_numeric_df_selected) != "PATNO"
standardize_cols
# Standardize all columns except PATNO
standardize_cols <- names(updated_numeric_df_selected) != "PATNO"
updated_numeric_df_selected[, standardize_cols] <- scale(updated_numeric_df_selected[, standardize_cols])
View(updated_numeric_df_selected)
# Merge all dataframes for modeling
model_df <- merge(categorical_df_selected, # All categorical predictors
updated_numeric_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
View(categorical_df_selected)
View(response_var_df)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
View(model_df)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
View(model_df)
model_df <- merge(categorical_df_selected, # All categorical predictors
updated_numeric_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
View(updated_numeric_df_selected)
model_df <- merge(categorical_df_selected, # All categorical predictors
updated_numeric_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
stepwise_model <- step(CONCOHORT ~., data = updated_numeric_df_selected)
# List of required packages
required_packages <- c("rethinking", "ggplot2", "viridis", "dplyr", "readr", "lubridate", "tidyr", "mosaic", "scales", "GGally", "lsr", "corrplot", "GGally", "gridExtra", "reshape2", "MASS")
# Function to install missing packages
install_missing_packages <- function(packages) {
installed <- rownames(installed.packages())
for (package in packages) {
if (!package %in% installed) {
install.packages(package)
}
}
}
# Install any missing packages
install_missing_packages(required_packages)
# Load the packages into the environment
for (package in required_packages) {
library(package, character.only = TRUE, quietly = TRUE)
}
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected, Hess = TRUE), direction = "both")
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, Hess = TRUE), direction = "both")
stepwise_model <- stepAIC(polr(as.factor(CONCOHORT) ~ ., data = updated_numeric_df_selected_CONCOHORT, Hess = TRUE), direction = "both")
stepwise_model <- stepAIC(polr(as.factor(CONCOHORT) ~ ., data = updated_numeric_df_selected_CONCOHORT, Hess = TRUE), direction = "both")
class(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
stepwise_model <- step(lm(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT), direction = "both")
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
stepwise_model <- step(lm(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT), direction = "both")
stepwise_model <- step(lm(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT), direction = "backward")
?polr
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE), direction = "both")
updated_numeric_df_selected_CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE), direction = "both")
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE), direction = "both")
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT) + 1
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
View(updated_numeric_df_selected_CONCOHORT)
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
View(updated_numeric_df_selected_CONCOHORT)
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT + 1)
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- updated_numeric_df_selected_CONCOHORT$CONCOHORT + 1
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- updated_numeric_df_selected_CONCOHORT$CONCOHORT + 1
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- as.factor(updated_numeric_df_selected_CONCOHORT$CONCOHORT)
View(updated_numeric_df_selected_CONCOHORT)
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE), direction = "both")
initial_values <- rep(0, ncol(updated_numeric_df_selected_CONCOHORT) - 1)
stepwise_model <- stepAIC(polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE, start = initial_values), direction = "both")
initial_values <- rep(0, ncol(updated_numeric_df_selected_CONCOHORT) - 1)
fit <- polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE, start = initial_values)
fit <- polr(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, HESS = TRUE)
updated_numeric_df_selected_CONCOHORT <- merge(updated_numeric_df_selected, response_var_df, by = "PATNO")
updated_numeric_df_selected_CONCOHORT$CONCOHORT <- updated_numeric_df_selected_CONCOHORT$CONCOHORT + 1
stepwise_model <- step(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, direction = "both")
stepwise_model <- step(CONCOHORT ~ ., updated_numeric_df_selected_CONCOHORT, direction = "both")
?step
stepwise_model <- step(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, direction = "both", step = 10000)
fit <- lm(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT)
stepwise_model <- step(fit, direction = "both", step = 10000)
updated_numeric_df_selected_CONCOHORT <- na.omit(updated_numeric_df_selected_CONCOHORT)
fit <- lm(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT)
stepwise_model <- step(fit, direction = "both", step = 10000)
stepwise_model <- step(fit, direction = "both", step = 100000000)
best_subset_model <- regsubsets(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, nvmax = 20)
library(leaps)
best_subset_model <- regsubsets(CONCOHORT ~ ., data = updated_numeric_df_selected_CONCOHORT, nvmax = 20)
summary(best_subset_model)
best_subset_results <- summary(best_subset_model)
View(best_subset_model)
View(best_subset_results)
bset_results$bic)
data.frame(
Adj.R2 = which.max(best_subset_results$adjr2),
CP = which.min(best_subset_results$cp),
BIC = which.min(best_subset_results$bic)
)
View(updated_numeric_df_selected)
model_df <- merge(categorical_df_selected, # All categorical predictors
updated_numeric_df_selected, # Numeric predictors (standardized)
by = "PATNO", all = TRUE)
model_df <- merge(model_df,
response_var_df, # CONCOHORT (response)
by = "PATNO", all = TRUE)
names(model_df)
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
cor_df <- model_df
# Kendall's tau correlation
pearson_cor <- cor(cor_df, method = "pearson")
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
cor_df <- model_df
# Kendall's tau correlation
pearson_cor <- cor(cor_df, method = "pearson")
nrow(subset(model_df$CONCOHORT == "0"))
nrow(subset(model_df$CONCOHORT == 0))
nrow(filter(model_df$CONCOHORT == "0"))
nrow(filter(model_df$CONCOHORT == 0))
nrow(filter(model_df$CONCOHORT = 0))
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
cor_df[] <- lapply(model_df, as.numeric)
# Kendall's tau correlation
pearson_cor <- cor(cor_df, method = "pearson")
View(pearson_cor)
# Identify non-NA correlations
non_na_pearson_cor <- !is.na(pearson_cor)
# Remove diagonal values becasue the diagonal will always be 1
diag(non_na_pearson_cor) <- FALSE
# Extract variables with non-NA (TRUE) correlations
cor_vars <- rownames(pearson_cor)[apply(non_na_pearson_cor, 1, any)]
# Create a new cor_df with only correlated variables
filtered_cor_df <- cor_df[, cor_vars, drop = FALSE]
# New Kendall's tau coefficient calculated
pearson_cor_filtered <- cor(filtered_cor_df, method = "pearson")
?corrplot.mixed
??corrplot.mixed
# List of required packages
required_packages <- c("rethinking", "ggplot2", "viridis", "dplyr", "readr", "lubridate", "tidyr", "mosaic", "scales", "GGally", "lsr", "corrplot", "GGally", "gridExtra", "reshape2", "MASS", "corrplot")
# List of required packages
required_packages <- c("rethinking", "ggplot2", "viridis", "dplyr", "readr", "lubridate", "tidyr", "mosaic", "scales", "GGally", "lsr", "corrplot", "GGally", "gridExtra", "reshape2", "MASS", "corrplot")
# Function to install missing packages
install_missing_packages <- function(packages) {
installed <- rownames(installed.packages())
for (package in packages) {
if (!package %in% installed) {
install.packages(package)
}
}
}
# Install any missing packages
install_missing_packages(required_packages)
# Load the packages into the environment
for (package in required_packages) {
library(package, character.only = TRUE, quietly = TRUE)
}
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
cor_df[] <- lapply(model_df, as.numeric)
# Kendall's tau correlation
pearson_cor <- cor(cor_df, method = "pearson")
# Filter variables that have non-NA correlation with the other
# Identify non-NA correlations
non_na_pearson_cor <- !is.na(pearson_cor)
# Remove diagonal values becasue the diagonal will always be 1
diag(non_na_pearson_cor) <- FALSE
# Extract variables with non-NA (TRUE) correlations
cor_vars <- rownames(pearson_cor)[apply(non_na_pearson_cor, 1, any)]
# Create a new cor_df with only correlated variables
filtered_cor_df <- cor_df[, cor_vars, drop = FALSE]
# New Kendall's tau coefficient calculated
pearson_cor_filtered <- cor(filtered_cor_df, method = "pearson")
pearson_cor_filtered_plot
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
cor_df[] <- lapply(model_df, as.numeric)
# Kendall's tau correlation
pearson_cor <- cor(cor_df, method = "pearson")
# Filter variables that have non-NA correlation with the other
# Identify non-NA correlations
non_na_pearson_cor <- !is.na(pearson_cor)
# Remove diagonal values becasue the diagonal will always be 1
diag(non_na_pearson_cor) <- FALSE
# Extract variables with non-NA (TRUE) correlations
cor_vars <- rownames(pearson_cor)[apply(non_na_pearson_cor, 1, any)]
# Create a new cor_df with only correlated variables
filtered_cor_df <- cor_df[, cor_vars, drop = FALSE]
# New Kendall's tau coefficient calculated
pearson_cor_filtered <- cor(filtered_cor_df, method = "pearson")
png("figures/correlation/pearson_correlation_filtered.png",
width = 15000, height = 15000, res = 1500)
pearson_cor_filtered_plot <- corrplot.mixed(pearson_cor_filtered,
upper = "number", upper.col = viridis(10, option = "C"),
lower = "square", lower.col = viridis(10, option = "C"),
tl.pos = "d",
tl.col = "black")
dev.off()
View(pearson_cor_filtered)
as.table(pearson_cor_filtered)
as_tibble(pearson_cor_filtered)
as.list(pearson_cor_filtered)
pearson_cor_filtered_list <- as.list(pearson_cor_filtered)
View(pearson_cor_filtered_list)
unnest(pearson_cor_filtered_list)
unnest(pearson_cor_filtered_list[3,])
# Strong correlation between:
pearson_cor_filtered_mosaic <- cor.test(filtered_cor_df, method = "pearson")
# Strong correlation between:
pearson_cor_filtered_mosaic <- cor.test(filtered_cor_df, method = "pearson")
# Strong correlation between:
filtered_cor_values <- as.vector(pearson_cor_filtered[upper.tri(pearson_cor_matrix)])
# Strong correlation between:
filtered_cor_values <- as.vector(pearson_cor_filtered[upper.tri(pearson_cor_filtered)])
filtered_cor_list <- as.list(filtered_cor_values)
t.test(filtered_cor_list)
View(filtered_cor_list)
filtered_cor_list <- as.table(filtered_cor_values)
filtered_cor_list <- as.data.frame(filtered_cor_values)
t.test(filtered_cor_list$filtered_cor_values)
filtered_cor_df <- as.data.frame(filtered_cor_values)
filtered_cor_t <- t.test(filtered_cor_df$filtered_cor_values)
filtered_cor_df <- as.data.frame(filtered_cor_values)
filtered_cor_t <- t.test(filtered_cor_df$filtered_cor_values)
lower_limit <- filtered_cor_t$conf.int[1]
upper_limit <- filtered_cor_t$conf.int[2]
# Create a dataframe with var1 and var2 stored in separate columns
filtered_cor_df <- data.frame(var1 = rep(names(pearson_cor_filtered), each = ncol(pearson_cor_filtered)),
var2 = rep(names(pearson_cor_filtered), ncol(pearson_cor_filtered)))
# Assign the correlation values to the appropriate cells
filtered_cor_df$correlation <- filtered_cor_values
filtered_cor_values <- as.vector(pearson_cor_filtered[upper.tri(pearson_cor_filtered)])
# Create a dataframe with var1 and var2 stored in separate columns
filtered_cor_df <- data.frame(var1 = rep(names(pearson_cor_filtered), each = ncol(pearson_cor_filtered)),
var2 = rep(names(pearson_cor_filtered), ncol(pearson_cor_filtered)))
# Assign the correlation values to the appropriate cells
filtered_cor_df$correlation <- filtered_cor_values
filtered_cor_df <- data.frame(var1 = rep(names(pearson_cor_filtered), each = ncol(pearson_cor_filtered)),
var2 = rep(names(pearson_cor_filtered), ncol(pearson_cor_filtered)))
View(filtered_cor_df)
filtered_cor_df <- data.frame(var1 = rep(names(filtered_cor_df), each = ncol(pearson_cor_filtered)),
var2 = rep(names(filtered_cor_df), ncol(pearson_cor_filtered)))
filtered_cor_df <- data.frame(var1 = rep(names(filtered_cor_df), each = ncol(pearson_cor_filtered)),
var2 = rep(names(filtered_cor_df), ncol(pearson_cor_filtered)))
View(filtered_cor_df)
# Strong correlation between:
filtered_cor_values <- as.vector(pearson_cor_filtered[upper.tri(pearson_cor_filtered)])
filtered_cor_df <- as.data.frame(filtered_cor_values)
filtered_cor_t <- t.test(filtered_cor_df$filtered_cor_values)
lower_limit <- filtered_cor_t$conf.int[1]
upper_limit <- filtered_cor_t$conf.int[2]
lower_limit
upper_limit
pearson_cor_filtered_plot$upper[abs(pearson_cor_filtered) < lower_limit | abs(pearson_cor_filtered) > upper_limit] <- "red"]
lower_limit <- filtered_cor_t$conf.int[1]
upper_limit <- filtered_cor_t$conf.int[2]
pearson_cor_filtered_plot <- corrplot.mixed(pearson_cor_filtered,
upper = "number", upper.col = viridis(10, option = "C"),
lower = "square", lower.col = viridis(10, option = "C"),
tl.pos = "d",
tl.col = "black")
pearson_cor_filtered_plot$upper[abs(pearson_cor_filtered) < lower_limit | abs(pearson_cor_filtered) > upper_limit] <- "red"]
pearson_cor_filtered_plot$upper[abs(pearson_cor_filtered) < lower_limit | abs(pearson_cor_filtered) > upper_limit] <- "red"
corrplot.mixed(pearson_cor_filtered_plot,
tl.pos = "d",
tl.col = "black")
png("figures/correlation/pearson_correlation_filtered.png",
width = 15000, height = 15000, res = 1500)
corrplot.mixed(pearson_cor_filtered_plot,
tl.pos = "d",
tl.col = "black")
pearson_cor_filtered$upper[abs(pearson_cor_filtered) < lower_limit | abs(pearson_cor_filtered) > upper_limit] <- "red"
dev.off()
png("figures/correlation/pearson_correlation_filtered.png",
width = 15000, height = 15000, res = 1500)
pearson_cor_filtered_plot <- corrplot.mixed(pearson_cor_filtered,
upper = "number", upper.col = viridis(10, option = "C"),
lower = "square", lower.col = viridis(10, option = "C"),
tl.pos = "d",
tl.col = "black")
dev.off()
lower_limit
t.test(filtered_cor_df$filtered_cor_values)
chi_square_results_CONCOHORT <- chi_square_results %>%
filter(var1 == "CONCOHORT") %>%
mutate(color = ifelse(p_value > 0.05, "Insignificant Association", "Significant Association"))
chi_square_results_CONCOHORT_filtered <- chi_square_results_CONCOHORT %>%
filter(p_value <= 0.05)
# Plot the results
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = 0.05, color = "red", linetype = "dashed") +
theme_classic() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
chi_square_results_CONCOHORT <- chi_square_results %>%
filter(var1 == "CONCOHORT") %>%
mutate(color = ifelse(p_value > 0.01, "Insignificant Association", "Significant Association"))
chi_square_results_CONCOHORT_filtered <- chi_square_results_CONCOHORT %>%
filter(p_value <= 0.01)
chi_square_results_CONCOHORT <- chi_square_results %>%
filter(var1 == "CONCOHORT") %>%
mutate(color = ifelse(p_value > 0.005, "Insignificant Association", "Significant Association"))
chi_square_results_CONCOHORT_filtered <- chi_square_results_CONCOHORT %>%
filter(p_value <= 0.005)
chi_square_results_CONCOHORT <- chi_square_results %>%
filter(var1 == "CONCOHORT") %>%
mutate(color = ifelse(p_value > 0.001, "Insignificant Association", "Significant Association"))
chi_square_results_CONCOHORT_filtered <- chi_square_results_CONCOHORT %>%
filter(p_value <= 0.001)
chi_square_results_CONCOHORT <- chi_square_results %>%
filter(var1 == "CONCOHORT") %>%
mutate(color = ifelse(p_value > 0.0001, "Insignificant Association", "Significant Association"))
chi_square_results_CONCOHORT_filtered <- chi_square_results_CONCOHORT %>%
filter(p_value <= 0.0001)
chi_square_results_CONCOHORT <- chi_square_results %>%
filter(var1 == "CONCOHORT") %>%
mutate(color = ifelse(p_value > 0.00001, "Insignificant Association", "Significant Association"))
chi_square_results_CONCOHORT_filtered <- chi_square_results_CONCOHORT %>%
filter(p_value <= 0.00001)
# Plot the results
chi_square_results_plot <- ggplot(data = chi_square_results_CONCOHORT,
aes(x = var1, y = p_value)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(col = color),
position = position_jitter(width = 0.2)) +
geom_hline(yintercept = 0.00001, color = "red", linetype = "dashed") +
theme_classic() +
scale_color_manual(values = c("Insignificant Association" = "red",
"Significant Association" = "black")) +
labs(y = "Chi-square p-value",
x = NULL) +
theme(legend.position = "none",
axis.text.x = element_blank())
ggsave("figures/pre-analysis/chi_square_results.png",
plot = chi_square_results_plot,
width = 3, height = 5, dpi = 1000)
# Filter for significant associations
significant_anova_results <- anova_results %>%
filter(p_value <= 0.01)  # Adjust the significance level as needed
# Filter for significant associations
significant_anova_results <- anova_results %>%
filter(p_value <= 0.05)  # Adjust the significance level as needed
# Filter for significant associations
significant_anova_results <- anova_results %>%
filter(p_value <= 0.01)  # Adjust the significance level as needed
# Filter for significant associations
significant_anova_results <- anova_results %>%
filter(p_value <= 0.001)  # Adjust the significance level as needed
# Filter for significant associations
significant_anova_results <- anova_results %>%
filter(p_value <= 0.00001)  # Adjust the significance level as needed
# Display the ANOVA results
head(anova_results)
# Display significant ANOVA results
head(significant_anova_results)
# Filter the original numeric dataframe by the results
numeric_vars_selected <- significant_anova_results$Variable
numeric_vars_selected <- setdiff(numeric_vars_selected, "CONCOHORT")
updated_numeric_df_selected <- numeric_df_selected[, numeric_vars_selected, drop = FALSE]
updated_numeric_df_selected <- as.data.frame(sapply(updated_numeric_df_selected, as.numeric))
# Standardize all columns except PATNO
standardize_cols <- names(updated_numeric_df_selected) != "PATNO"
updated_numeric_df_selected[, standardize_cols] <- scale(updated_numeric_df_selected[, standardize_cols])
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
cor_df[] <- lapply(updated_numeric_df_selected, as.numeric)
# Kendall's tau correlation
pearson_cor <- cor(cor_df, method = "pearson")
# Filter variables that have non-NA correlation with the other
# Identify non-NA correlations
non_na_pearson_cor <- !is.na(pearson_cor)
# Remove diagonal values becasue the diagonal will always be 1
diag(non_na_pearson_cor) <- FALSE
# Extract variables with non-NA (TRUE) correlations
cor_vars <- rownames(pearson_cor)[apply(non_na_pearson_cor, 1, any)]
# Create a new cor_df with only correlated variables
filtered_cor_df <- cor_df[, cor_vars, drop = FALSE]
# New Kendall's tau coefficient calculated
pearson_cor_filtered <- cor(filtered_cor_df, method = "pearson")
filtered_cor_values <- as.vector(pearson_cor_filtered[upper.tri(pearson_cor_filtered)])
filtered_cor_df <- as.data.frame(filtered_cor_values)
filtered_cor_t <- t.test(filtered_cor_df$filtered_cor_values)
# New Kendall's tau coefficient calculated
pearson_cor_filtered <- cor(filtered_cor_df, method = "pearson")
png("figures/correlation/pearson_correlation_filtered.png",
width = 15000, height = 15000, res = 1500)
pearson_cor_filtered_plot <- corrplot.mixed(pearson_cor_filtered,
upper = "number", upper.col = viridis(10, option = "C"),
lower = "square", lower.col = viridis(10, option = "C"),
tl.pos = "d",
tl.col = "black")
View(pearson_cor_filtered)
View(pearson_cor)
# Before any correlation test, add 1 to all CONCOHORT values
# CONCOHORT originally has two levels of 0 and 1
cor_df[] <- lapply(updated_numeric_df_selected, as.numeric) %>%
na.omit()
# Calculate correlation
pearson_cor <- cor(cor_df, method = "pearson")
